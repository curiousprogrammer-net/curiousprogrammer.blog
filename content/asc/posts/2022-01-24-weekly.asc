{
:date "2022-01-24"
:title "Weekly Bits & Pieces 01/2022 (17.1. - 23.1.)"
:layout :post
:tags  ["weekly-bits" "aws" "security" "javascript" "clojure"]
}

:toc:
:toclevels: 4

_Interesting stuff I did and found in the past week_.

## Clojure

### +<--+ macro

Christophe Grand: https://clojurians.slack.com/archives/C03S1KBA2/p1642537427215800

My clojure-experiments: https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/macros/core.clj#L37-L83

## Cloud

### Cloudonaut

Cloudonaut is my favorite resource for learning AWS.
I've been a subscriber when they still offered paid subscriptions
and I'm now regular follower of stuff they publish.

#### AWS Architect Mindset: https://cloudonaut.io/aws-architect-mindset/

* Amazon EC2 instance network bandwidth: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html
** If your EC2 instance has guaranteed 10 Gbit/s connectivity, you only get 5Gbit/s to and from the Internet.
* Restriction on email sent using port 25: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html#port-25-throttle
** EC2 blocks outbound traffic on port 25 by default - No matter what your security group says
* Amazon Compute Service Level Agreement: https://aws.amazon.com/compute/sla/
** If you look closer, 99.99% does not apply to a single instance - assumes that EC2 instances are deployed concurrently across two or more AZs in the same region.
** Check Instance-Level SLA => it's 99.5% for single instance

### New blog post about Cloudwatch insights and converting unix timestamps.

link:2022-01-18-cloudwatch-insights-vs-unix-timestamps[]


### RDS upgrade through terraform - next week?


### Terraform webinar - tfsec and OPA


### 10 Rules for better Cloud Security

https://dzone.com/articles/rules-for-better-cloud-security

A basic but helpful checklist:

* Rule 1: Donâ€™t Overlook Developer Credentials
* Rule 2: Always Review Default Configurations - often convenient but not very secure (check toolsl like AWS Security Advisor)
* Rule 3: List Publicly Accessible Storage - things like open S3 buckets
* Rule 4: Regularly Audit Access Control
* Rule 5: Leverage Network Constructs
* Rule 6: Make Logging and Monitoring Preventive - effective alerting system
* Rule 7: Enrich your Asset Inventory
* Rule 8: Prevent Domain Hijacking - Regularly review your DNS and cloud configurations to prevent take-over situations.
* Rule 9: A Disaster Recovery Plan is Not Optional - Design a DR program to recover from outside accounts, providers, or locales.
* Rule 10: Limit Manual Configurations - infrastructure as code?


## Books update

### Api Security in Action: 

- 5 security mechanisms
- mkcert tool
- Rate limiting & defense in depth
- Audit logs & separationg of duties


## Writing

I finally finished transfer of my blog from wordpress to Cryogen + Cloudflare pages.
I'm very happy about this change that took me almost 2 years!

### AsciiDoc

I decided to use AsciiDoc format for my writing, instead of more well known Markdown.
It's more standardized, has more features and it's extensible.


## MISC

### 5 JavaScript features you should learn

https://dzone.com/articles/5-javascript-concepts-every-web-developer-should-l

* **_let_ and _const_** - var can be re-declared and updated
** let cannot be re-declared
** const can neither be re-declared nor updated

* **string interpolation**
+
[source,javascript]
----
return `${firstname} ${secondname} is ${age} years old and he lives in ${city}`;
----
* **spread operator** `...`
+
[source, javascript]
----
let arr1 = [1, 2, 3];
let arr2 = [4, 5, 6];
let arr3 = [ ...arr1, ...arr2 ]
console.log(arr3) // [1, 2, 3, 4, 5, 6]
----

* *arrow functions*
+
[source,javascript]
----
// instead of this:
function demo(a, b) {
return a + b;
}
// write this:
const demo = (a,b) => a + b;
----

* *destructuring*
+
[source,javascript]
----
const { name, age, city } = { name: "John", age: 27, city: "Texas" };
----
+
** **Array destructuring** is done using square brackets

#### Apart from these features, you should also learn features such as:

* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[promises] - a promise is a proxy for a value not necessarily known when the promise is created
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function[async/await] - An async function is a function declared with the async keyword, and the await keyword is permitted within it
** Check https://javascript.info/async-await which also shows how to explicitly return a _promise_
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters[rest operator] - `_...theArgs_` params allows a function to accept an indefinite number of arguments as an array,
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array[new array methods]
* https://ui.dev/shorthand-properties/[shorthand properties] - when you have a variable which has the same name as a property of the constructed object

