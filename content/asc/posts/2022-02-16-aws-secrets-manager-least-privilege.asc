{
:date "2022-02-16"
:title "AWS Secrets Manager and the principle of least-privilege"
:layout :post
:tags  ["aws" "security"]
}

:toc:

AWS Secrets Manager is a great place to store secrets that are needed by somebody else (machines or people)
if you are running your infrastructure on AWS.

You can give subjects (users, groups, or roles) accesss only to specific secrets following
https://en.wikipedia.org/wiki/Principle_of_least_privilege[the principle of least privilege].

Here's a useful AWS guide:
https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html#iam-policy-examples-asm-specific-secrets[Allow read access to specific secrets in AWS Secrets Manager^]

## Example

This shows how to give users access to specific API (keys):

### 1. Save API keys in Secrets Manager

First, store the API keys in Secrets Manager under well-defined key, lets say `my-app/prod/my-api` - it can look like this:

[source,JSON]
----
{
  "api-key": "abcdefg",
  "secret-key": "1234567890"
}
----

Then, *copy `Secret ARN`* (can be found at the top of the AWS Secrets Manager console - 'Secret details' section).
It will be something like this:

[source]
----
arn:aws:secretsmanager:{AWS_REGION}:{AWS_ACCOUNT_ID}:secret:config/my-app/prod/my-api-N9iZ3I
----

### 2. Create the IAM policy

Create the https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html#iam-policy-examples-asm-specific-secrets[IAM policy] using the specific ARN - this example uses terraform

[source,terraform]
----
module "my-api-policy" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-policy"
  version = "~> 4.3"

  name        = "my-api-policy"
  path        = "/"
  description = "This policy allows you to access my-api"
  policy      = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds"
            ],
            "Resource": [
                "arn:aws:secretsmanager:{AWS_REGION}:{AWS_ACCOUNT_ID}:secret:config/my-app/prod/my-api-N9iZ3I"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "secretsmanager:ListSecrets",
            "Resource": "*"
        }
    ]
}
EOF
}
----

### 3. Create the IAM group and attach the policy

Again, with https://registry.terraform.io/modules/terraform-aws-modules/iam/aws/latest/submodules/iam-group-with-policies[Terraform^]:

[source,terraform]
----
# create the group and attach the policy
module "api-group" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-group-with-policies"
  version = "~> 4.3"

  name = "api-users"

  group_users = [
    "john.doe"
  ]

  attach_iam_self_management_policy = false

  # attach the policy defined above to the group
  custom_group_policy_arns = [
    module.my-api-policy.arn,
  ]
}
----

With this policy in place you can be user they have only access to the specific API secrets - nothing more, nothing less.

