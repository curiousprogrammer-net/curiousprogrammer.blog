{
:date "2022-02-16"
:title "AWS Secrets Manager and the principle of least-privilege"
:layout :post
:tags  ["aws" "security" "terraform" "clojure"]
}

:toc:

AWS Secrets Manager is a great place to store secrets that are needed by somebody else (machines or people)
if you are running your infrastructure on AWS.

You can give subjects (users, groups, or roles) accesss only to specific secrets following
https://en.wikipedia.org/wiki/Principle_of_least_privilege[the principle of least privilege].

There's an AWS guide which will help you with the process:
https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html#iam-policy-examples-asm-specific-secrets[Allow read access to specific secrets in AWS Secrets Manager^]

Below, I'm going to walk you through the process of storing and using API keys for
https://developers.amplitude.com/docs/export-api#export-api-parameters[Amplitude Export API^].

## Storing API keys

This shows how to give users access to the specific API (keys).

I assume you already have an
https://help.amplitude.com/hc/en-us/articles/360058073772-Create-and-manage-organizations-and-projects#view-and-edit-your-project-information[Amplitude project with corresponding API keys^]
but this is really just an example so you definitely don't need an Amplitude account to follow along.

### 1. Save API keys in Secrets Manager

First, store the Amplitude API keys in Secrets Manager under well-defined key, lets say `my-app/prod/amplitude-api`.
The secret value will look like this:

[source,JSON]
----
{
  "api-key": "abcdefg",
  "secret-key": "1234567890"
}
----

Then, *copy `Secret ARN`* (can be found at the top of the AWS Secrets Manager console - 'Secret details' section).
For example:

[source]
----
arn:aws:secretsmanager:{AWS_REGION}:{AWS_ACCOUNT_ID}:secret:config/my-app/prod/amplitude-api-N9iZ3I
----

### 2. Create the IAM policy

Create the https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html#iam-policy-examples-asm-specific-secrets[IAM policy] *using the specific ARN* - this example uses terraform:

[source,terraform]
----
module "amplitude-api-policy" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-policy"
  version = "~> 4.3"

  name        = "amplitude-api-policy"
  path        = "/"
  description = "This policy allows you to access Amplitude API keys"
  policy      = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds"
            ],
            "Resource": [
                "arn:aws:secretsmanager:{AWS_REGION}:{AWS_ACCOUNT_ID}:secret:config/my-app/prod/amplitude-api-N9iZ3I"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "secretsmanager:ListSecrets",
            "Resource": "*"
        }
    ]
}
EOF
}
----

### 3. Create the IAM group and attach the policy

Again, with https://registry.terraform.io/modules/terraform-aws-modules/iam/aws/latest/submodules/iam-group-with-policies[Terraform^]:

[source,terraform]
----
module "amplitude-api-users-group" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-group-with-policies"
  version = "~> 4.3"

  name = "amplitude-api-users"

  group_users = [
    "john.doe"
  ]

  attach_iam_self_management_policy = false

  # attach the policy defined above to the group
  custom_group_policy_arns = [
    module.amplitude-api-policy.arn,
  ]
}
----

With this policy in place, you can be sure they have access only to the specific API secrets - nothing more, nothing less.


## Using API keys

We have the API keys safely stored in the Secrets Manager and every member of the `amplitude-api-users` group
can now fetch them via standard AWS APIs.


### Fetch API keys with AWS CLI

Quick way to test that you have access to API keys is with AWS CLI:
[source,bash]
----
aws secretsmanager get-secret-value --secret-id "config/my-app/prod/amplitude-api"

# this should return something like this:
{
    "ARN": "arn:aws:secretsmanager:{AWS_REGION}:{AWS_ACCOUNT_ID}:secret:config/my-app/prod/amplitude-api-N9iZ3I",
    "Name": "config/my-app/prod/amplitude-api",
    "VersionId": "ae7b2ec0-df1c-416f-8037-7b03517c2670",
    "SecretString": "{\"api-key\":\"abcdefg\",\"secret-key\":\"1234567890\"}", <1>
    "VersionStages": [
        "AWSCURRENT"
    ],
    "CreatedDate": "2022-02-16T10:00:58.597000+01:00"
}
----
<1> `SecretString` contains the JSON we stored in Secrets Manager before


### Use API keys with Clojure

Here's a complete code for fetching API keys via AWS API and using them to download events from Amplitude:

[source,clojure]
----
(ns amplitude.export
  "Playing with Amplitude Export API:
  https://developers.amplitude.com/docs/export-api#export-api-parameters

  It can be used to export raw events data unlike the UI
  where you can typically only export to chart data or users.
  See https://community.amplitude.com/instrumentation-and-data-management-57/how-do-i-pull-a-specific-event-with-all-event-properties-and-export-to-csv-491"
  (:require [clj-http.client :as http]
            [clojure.data.json :as json]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [cognitect.aws.client.api :as aws]
            [cognitect.aws.credentials :as credentials]))


(def secrets-client
  (delay (aws/client {:api :secretsmanager
                      :credentials-provider (credentials/profile-credentials-provider "my-aws-profile")})))

(defn fetch-api-keys []
  (let [{:keys [SecretString] :as _result} (aws/invoke @secrets-client
                                                       {:op :GetSecretValue
                                                        :request {:SecretId "config/my-app/prod/amplitude-api"}})]
    (json/read-str SecretString)))

(def api-keys (delay (fetch-api-keys)))


;; check the docs
(comment
  (keys (aws/ops @secrets-client))

  (aws/doc @secrets-client :GetSecretValue)
,)


(defn download-events! [output-file start end]
  (println "Exporting Amplitude events between" start "and" end)
  (time (let [{:strs [api-key secret-key]} @api-keys
              response (http/get (format "https://amplitude.com/api/2/export?start=%s&end=%s" start end)
                                 {:basic-auth [api-key secret-key]
                                  :as :stream})]
          (io/copy (:body response) (io/file output-file))
          (println "Amplitude events exported to" output-file))))

(defn- read-events! [json-file]
  (map json/read-str (line-seq (io/reader json-file))))

(defn read-all-events! [directory]
  (let [read-all-xf (comp (filter #(str/ends-with? (.getName %) ".json"))
                          (mapcat read-events!))]
    (into [] read-all-xf (file-seq (io/file directory)))))


(comment
  ;; download all the events from 31.1.2022
  (download-events! "all-events.zip" "20220131T00" "20220131T23")

  ;; Now go to the file and unzip it manually
  ;; Also gunzip all the files from the extracted zip archive.

  ;; Then you can read all the downloaded events stored in given folder
  (def all-events
    ;; it can take almost 10 seconds to read the data from JSON files consuming about 150 MB disk space
    (->> (time (read-all-events! "amplitude-events-directory"))))
,)

----
