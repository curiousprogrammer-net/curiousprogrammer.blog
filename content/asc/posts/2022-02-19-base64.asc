{
:date "2022-02-19"
:title "Base 64 encoding, padding, and URLs"
:layout :post
:tags  ["encoding"]
}

:toc:

TL;DR: If you know the size of your input beforehand, it's safe to leave out the padding character ('=')
so you don't need to _percent-encode_ it for safe usage in URLs.



## The spec

My colleague added a spec for base64 encoded values in our codebase
and that made me check what is actually a valid set of characters
in a Base64-encoded string.

Initially, it looked like this:

image::/img/2022-02-14-weekly/base64-spec.png[base64 - clojure.spec]


## Two variants of Base 64 encoding

https://datatracker.ietf.org/doc/html/rfc4648#section-4[RFC 4648]
lists two common variants:

* https://datatracker.ietf.org/doc/html/rfc4648#section-4[Base 64 encoding]
using alphanumeric chars, `+`, `/`, and `=` as the padding character.
* https://datatracker.ietf.org/doc/html/rfc4648#section-5[Base 64 encoding with URL and Filename Safe Alphabet]
using alphanumeric chars, `-`, `_`, and also `=` as the padding character.

## To pad, or not to pad?

The thing is that `=` is not really safe to use in URLs so you either need to encode it (additional hassle)
or (somehow) left it out.
The RFC suggests that:
[quote]
____
The pad character "=" is typically percent-encoded when used in an URI.
____

So I asked, in the comment, if we should include `=` too.

However, https://datatracker.ietf.org/doc/html/rfc4648#section-3.2[section 3.2]
also says this:
[quote]
____
*In some circumstances, the use of padding ("=") in base-encoded data is not required or used*.
In the general case, when assumptions about the size of transported data cannot be made,
padding is required to yield correct decoded data.
____

In fact, as the link:/posts/2022-02-14-weekly#_api_security_in_action[Api Security in Action] book mentions,
it's common to exclude the padding because you have a complete encoded value.
The book contains this class for encoding/decoding:

[source,java]
----
public class Base64Url {

    // For more about padding and when it's needed see: https://stackoverflow.com/questions/4080988/why-does-base64-encoding-require-padding-if-the-input-length-is-not-divisible-by
    private static final Base64.Encoder encoder = Base64.getUrlEncoder().withoutPadding();
    private static final Base64.Decoder decoder = Base64.getUrlDecoder();

    public static String encode(byte[] data) {
        // Note that this uses ISO-8859-1 - should be safe since Base64 uses only ASCII characters anyway
        return encoder.encodeToString(data);
    }

    public static byte[] decode(String encoded) {
        return decoder.decode(encoded);
    }

    public static void main(String[] args) {
        System.out.println("Default charset: " + Charset.defaultCharset());
        System.out.println(encode("ahojľščáýíô".getBytes()));
        System.out.println("decoded: " + new String(decode(encode("ahojľščáýíô".getBytes()))));
    }
}
----


## What about the spec

What I would do is the following

* Rename the spec to `::base64url-without-padding` to make it explicit we deliberately don't use padding with an explanation when this is safe to use
* Remove `+` and `/` from the set of valid characters
* Add `-` as it's a valid character in the URL safe version