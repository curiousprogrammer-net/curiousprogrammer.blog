{
:date "2022-04-04"
:title "Weekly Bits 07/2022 - TODO"
:layout :post
:tags  ["weekly-bits" "clojure" "aws"]
}

:toc:
:toclevels: 4


_Some of the interesting things I did, learned, or found in the past week_.

TODO: continue with 17.3.2022

## Clojure

### Verbose namespace loading

Nice tip for "debugging" clojure namespace loading from hiredman on slack: https://clojurians.slack.com/archives/C03S1KBA2/p1646782587521059

[source,clojure]
----
;; turn it on everywhere
(alter-var-root #'clojure.core/*loading-verbosely* (constantly true))
----

Note: there's also https://clojuredocs.org/clojure.core/require[`:verbose` option for `require`^]

### Learn Reagent 

Progressing with https://www.jacekschae.com/view/courses/learn-reagent-pro[the course],
I started playing with Firebase.

I also learned about `#js` as an alternative to `clj->js`.
(note that `#js` is "shallow" - it does not recursively convert the whole data structure).


## Java / JVM



## AWS & Cloud

### EC2 Instance Connect & SSM Manager

A great article from the Cloudonaut crew: https://cloudonaut.io/connect-to-your-ec2-instance-using-ssh-the-modern-way/[Connect to your EC2 instance using SSH the modern way^].

I jumped on the wagon and started using this technique which allows me to get rid of our bastion hosts altogether.

#### IAM Policies and Terraform variable interpolation

While working on the transition to EC2 Instance Connect,
I found that interpolating variables inside IAM policy documents
requires special attention with Terrafrom.

Instead of the usual `${aws:username}` you need to use double-dollar sign, that is `$${aws:username}`:

[source,terraform]
----
module "ssm-sessions-policy" {
  source      = "terraform-aws-modules/iam/aws//modules/iam-policy"
  ...
  policy      = <<EOF
  ...
                "Resource": [
                "arn:aws:ssm:*:*:session/$${aws:username}-*"
            ]
----



### Setting up a new CloudFront distribution & the Host header

I made a brand new CloudFront distribution for one of our public-facing web applications
that was still missing it.
The advantage is now that we can use the same WAF rules we use everywhere and of course improved
performance and security in general.

I learned, that it is important to pass the `Host` header to the origin server to make redirects work.
Briefly, our public facing server lives at portal.codescene.com - this is a CloudFront distribution
that points to origin-portal.codescene.com which is a Beanstalk load balancer.

Without passing the Host header, redirects made by the application were broken,
because they were redirecting to origin-portal.codescene.com, instead of portal.com.
It wouldn't be a problem if we "relative" redirects work properly - but they don't:
https://stackoverflow.com/questions/25652718/do-relative-server-side-redirects-respect-the-protocol[many web servers still rewrite relative redirect URLs to absolute URLs^]
because of how former HTTP redirects spec was defined (see https://en.wikipedia.org/wiki/HTTP_location[Wikipedia: HTTP location^]).

See also https://aws.amazon.com/premiumsupport/knowledge-center/configure-cloudfront-to-forward-headers/[How do I configure CloudFront to forward the Host header to the origin?^]


## Reading (Books)



## Writing (Blog, Articles)




## MISC

### On the complexity of Kafka and alternative messaging systems

There was a good discussion on Clojurians slack about
https://clojurians.slack.com/archives/C03S1KBA2/p1647192709930709?thread_ts=1647117379.915279&cid=C03S1KBA2[Kafka and alternative messaging systems^].

In particular, how RabbitMQ can be easily used for consuming messages
even after they have been published (assuming the consumers were offline at the time):

[quote, lukasz on Clojuarians slack]
____
lukasz: one of the primary use cases is exactly that: accepting webhooks and processing them out of band.

I forget how many millions of msg/s we're processing right now with a mid-size managed instance in AWS.
You can do that with Rabbit just fine - set your queues to be durable and persistent.
In fact, that's how all our consumers operate - we have open sourced our framework for safe RMQ consumers: https://github.com/nomnom-insights/nomnom.bunnicula/
____

## Links

A quick recap of some of the links mentioned in this post:

* https://cloudonaut.io/connect-to-your-ec2-instance-using-ssh-the-modern-way/[Connect to your EC2 instance using SSH the modern way^]
* https://clojurians.slack.com/archives/C03S1KBA2/p1647192709930709?thread_ts=1647117379.915279&cid=C03S1KBA2[Kafka and alternative messaging systems^]
* https://aws.amazon.com/premiumsupport/knowledge-center/configure-cloudfront-to-forward-headers/[How do I configure CloudFront to forward the Host header to the origin?^]
* https://stackoverflow.com/questions/25652718/do-relative-server-side-redirects-respect-the-protocol[many web servers still rewrite relative redirect URLs to absolute URLs^]
* https://en.wikipedia.org/wiki/HTTP_location[Wikipedia: HTTP location^]



