{
:date "2022-05-03"
:title "Bits & Pieces 09/2022 - April"
:layout :post
:tags  ["weekly-bits" "clojure" "aws" "architecture" "linux" "writing" "security"]
}

:toc:
:toclevels: 4


_This time, it is more of a "Monthly bits" piece because I didn't have time to publish regular weekly updates in April_.

## Clojure

### Broken HTTP/S redirects, friend, and ring

One of our on-premise customers reported a problem with redirects when running CodeScene
behind a proxy server terminating HTTPS.
In such cases, we'd always recommended our clients to
 https://github.com/empear-analytics/docker-codescene-nginx-self-signed-ssl/blob/master/docker-nginx/nginx.conf#L54[configure their proxy server to rewrite redirect URLs^].

However, my colleague wasn't satisfied with this solution
and looked at the http routing machinery we use.
They found that _friend_, a clojure authentication library,
https://github.com/clj-commons/friend/issues/4[enforced absolute URLs for redirects^]
even though we configured it to use absolute URLs.

I found that _ring_ https://github.com/ring-clojure/ring-defaults/issues/39[does the same thing],
but its behavior can be customized.

A long time ago, the old HTTP spec mandated using absolute URLs for redirects.
This is no longer valid and it's completely fine to use relative URLs for redirects.
See https://en.wikipedia.org/wiki/HTTP_location.

I submitted a pull request to friend's repo to
https://github.com/clj-commons/friend/pull/5[get rid of enforcing absolute URLs for redirects^]
and configured ring-defaults in our app properly:

[source,clojure]
----
(defn not-enforce-absolute-redirects [defaults]
  (assoc-in defaults [:responses :absolute-redirects] false))

(def my-app 
  (-> handler
      (wrap-defaults (-> site-defaults not-enforce-absolute-redirects))))
----

This fixed the customer's problem.



### REPL meets businesss

A programmer shared a https://clojurians.slack.com/archives/C053AK3F9/p1650442176108609[nice experience report on Clojurians slack^]
about using the REPL when talking to a business person:

[quote]
____
* Their eyes widened as I was able to use Calva’s Shift + Option + Enter keyboard shortcut to evaluate each “step” of the threading macro to see the result. Creating “verbs” as functions and stringing them together with threading macros—evaluating each “step” in the REPL—is a powerful “scratchpad/whiteboard” for showing and explaining things to non-technical people. 
* Had they asked a few months ago, I would have used Python in Jupyter Notebook.And they were in awe of Clojure/VS Code/Calva, saying things like: “What is that tool you’re using?! That’s amazing. I need something like that.
* ”Reminder to self: Show, don’t tell. And don’t assume that non-technical people won’t understand what’s going on
____



### clj-ddd-example

didibus published https://github.com/didibus/clj-ddd-example[clj-ddd-example^]:

* An example implementation of Domain Driven Design in Clojure with lots of information about DDD and its concepts and how it's implemented in Clojure along the way.
* discussion on clojureverse: https://clojureverse.org/t/domain-driven-design-ddd-in-clojure-an-example-implementation/8802[Domain Driven Design (DDD) in Clojure, an example implementation^]

### Moving files between file systems

I had a trouble with the https://github.com/Raynes/fs/blob/master/src/me/raynes/fs.clj#L289-L292[`me.raynes.fs/rename` function^]
not moving files across file system boundary and simply returning `false.`

This is actually a problem with the underlying java.io.File method `renameTo`.
It's one of the many shortcomings of the
https://docs.oracle.com/javase/tutorial/essential/io/legacy.html[legacy Java file I/O^].


The solution was to use the Java NIO.2 API:

[source,clojure]
----
(defn rename-file
  "Moves source file to the target file while respecting `replace-existing?`, by default true.
  `source` and `target` are expected to be a string, java.io.File or java.nio.file.Path.
  This uses java.nio.file.Files/move to overcome shortcomings of old `java.io.File/renameTo` method,
  notably when moving files between different file systems:
  - https://docs.oracle.com/javase/tutorial/essential/io/legacy.html
  - https://www.baeldung.com/java-path-vs-file"
  ([source target]
   (rename-file source target true))
  ([source target replace-existing?]
   (Files/move (.toPath (io/file source))
               (.toPath (io/file target))
               (into-array (if replace-existing?
                             [StandardCopyOption/REPLACE_EXISTING]
                             [])))))
----

The new function moves the file properly (and if it does not, it will throw an exception).


### Serializing & De-serializing Clojure objects

https://groups.google.com/g/clojure/c/5wRBTPNu8qo[2008 discussion with a couple of comments from Rich Hickey^]
to understand the difference between `print-method` and `print-dup`:

* Rich: Yes, please consider print/read. It is readable text, works with a lot of data structures, and is extensible.
* As part of AOT I needed to enhance print/read to store constants of many kinds, and restore faithfully - This led to a new multimethod - print-dup, for high-fidelity printing.
* You can get print-dup behavior by binding *print-dup*

I have a full example here: https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/compiler/reader-and-printer.clj#L34-L91.
Here's a snippet of it:

[source,clojure]
----
(binding [*print-dup* true]
  (dorun
   (map prn
        [[1 2 3]
         {4 5 6 7}
         (java.util.ArrayList. [8 9])
,,,
;; prints this:
;; [1 2 3]
;; #=(clojure.lang.PersistentArrayMap/create {4 5, 6 7})
;; #=(java.util.ArrayList. [8 9])
----


### https://github.com/clojure-lsp/lsp4clj[lsp4clj^]

Eric Dallo announced a new lib lsp4clj that should help you create any LSP for any language in Clojure.

### https://github.com/cnuernber/charred[Charred^] - new JSON & CSV parsing library with zero dependencies and very fast

Chris Nuernber introduced a brand new library for parsing JSON and CSV.
It's very fast and importantly, doesn't have any dependency on Jackson.

See https://clojurians.slack.com/archives/C06MAR553/p1649789577454649[Clojurians slack discussion^].

### Verbose reloading of current clojure namespace

A useful https://clojurians.slack.com/archives/C03S1KBA2/p1650639216984309[tip from Clojurians slack^]
how to reload and print all dependencies of a namespace:

[source,clojure]
----
(require (ns-name *ns*) :reload :verbose)
----




### Pipe buffers

I https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/java/processes.clj#L92-L97[experimented a bit with pipe buffers^].

Pipes are the most common way to read output of a sub-process.
It is important to read the sub-processe's output promptly, though.
If you fail to do so, the sub-process will block if its output is larger than max pipe buffer size, which is typically 64 KB.

## Java / JVM

### OutOfMemoryError: unable to create a new native thread

Sometimes, you may experiences a rather odd "OutOfMemoryError" with the detail error message saying something like this:

[source,bash]
----
Exception in thread "async-dispatch-4" java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached
----

This is probably a symptom of something else.
It could be insufficient system memory, but it's more likely that you are hitting the 'max number of open files' limit.

Here are some things to try:
http://www.mastertheboss.com/jbossas/monitoring/how-to-solve-javalangoutofmemoryerror-unable-to-create-new-native-thread/[How to solve java.lang.OutOfMemoryError: unable to create new native thread^]

* check threads-max (system-wide limit on max number of threads): `sysctl kernel.threads-max`
* check `ulimit -n` (number of open files)
* count processes & threads: `ps -elfT | wc -l`
* count threads for given process: `ps -p $(pgrep java) -lfT | wc -l`
* check PID  limit: `sysctl kernel.pid_max`

### Basic Java/Linux monitoring script:

As a follow-up to the previous OOM topic, I came up with a
https://github.com/jumarko/system-utilities/blob/main/monitoring/watch-java-app-on-linux.sh[basic Java/Linux monitoring script^].

Run it like this:

[source,bash]
----
nohup watch -n 20 './watch.sh >> monitor.log' &> /dev/null &
----


### Prevent Java from executing sub-processes

I answered this StackOverflow question:
https://stackoverflow.com/questions/71811463/how-to-prevent-a-java-application-from-executing-processes-on-gnu-linux[How to prevent a Java application from executing processes on GNU/Linux?^]

In short, I don't think this is easily eachievable.
Security Manager used to be a tool to solve such problems but it's https://openjdk.java.net/jeps/411[_deprecated for removal_^].
If you try to limit number of processes executed by the JVM process you will run into serious issues since threads themselves are counted as processes

[source]
----
[9816123.415s][warning][os,thread] Failed to start thread - pthread_create failed (EAGAIN) for attributes: stacksize: 2048k, guardsize: 0k, detached.

----

### JVM Shutdown Sequence

java.lang.Shutdown class is useful place to learn about what happens when the JVM process exits.

An orderly shutdown sequence will call
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Shutdown.java#L161-L176[Shutdown#exit^]
whose body is straightforward:

[source,java]
----
            beforeHalt();
            runHooks();
            halt(status);
----

For the application programmer, the important method is `runHook` - it calls all the registered _shutdown hooks_.


## Architecture

### Architecture: The Hard Parts (a book by Neal Ford and Mark Richards)

I've had the book for some time but didn't find time to read it.
This month, I listened to a Thoughtworks' podcast about the book where they give a useful summary of it:

* It’s all about **trade off analysis**

* Two (three) main things in distributed analysis
** **sizing** (granularity of) services
** **Communication/ wiring**
** And then **data management** (you cannot treat sw and data architecture separately these days)

* Book https://www.amazon.com/Every-Programmer-Should-Object-Oriented-Design/dp/0932633315[What every programmer should know about object oriented design^] is useful for understanding various types of _cohesion_
** especially the distinction between static and dynamic coupling 

* Architecture kata: SysOps squad stories

* Rebecca: **Architecture give us (is?) a framework for thinking about and working with complexity**

* **Data architecture**
* Historically, there was a sharp distinction between analytics (data warehouses) and operational data
** Today, we see the need for bringing analytical capabilities back to applications (in real time)
*** We have three main types: *data warehouses, data lakes, data meshes*
** There's still a key distinction between them: 
*** *operational workloads* - the code defines a procedure and stores it's state (code-first)
*** *analytics* - data drives the behavior, like in Machine learning (data-first)

I also checked another podcast's episode about NoSQL with Martin Fowler.
He offered a good piece of advice:

* **Using Database as an integration point is horrible**
* Amazon did it right by integrating via external APIs




## AWS & Cloud

### CloudFront's Server-Timing headers

Amazon CloudFront now supports
https://aws.amazon.com/about-aws/whats-new/2022/03/amazon-cloudfront-server-timing-headers/[Server Timing headers^]

Server Timing headers provide detailed performance information, such as whether content was served from the cache
when a request was received, how the request was routed to the CloudFront edge location,
and how much time elapsed during each stage of the connection and response process.

Example:
[source]
----
Server-Timing: cdn-upstream-layer;desc="REC",cdn-upstream-dns;dur=0,cdn-upstream-connect;dur=195,cdn-upstream-fbl;dur=366,cdn-cache-miss,cdn-pop;desc="IAD89-C3",cdn-rid;desc="bjEUzYyv7e3FyYoK93Tw0MNYhNV2zVTMbjFO8g-Tr5aEW108VkzM-w=="
----

To enable the Server-Timing header, create (or edit)
a https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/creating-response-headers-policies.html[response headers policy^].

### https://cloudonaut.io/serving-content-only-to-logged-in-users-with-cloudfront-signed-cookies/[Serving content only to logged-in users with CloudFront Signed Cookies^]

Another useful article/guide from Cloudonaut.
They demonstrate how CloudFront can be used to restrict parts of your website only to authenticated users.

## Security

### Critical JDK vulnerability in the ECDSA verification algorithm (CVE-2022-21449)

A nasty vulnerability was disclosed by ForgeRock: see https://neilmadden.blog/2022/04/19/psychic-signatures-in-java/: 
**You could https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/security/signing.clj#L9-L23[produce a fake signature^]
which Java would accept as a valid signature for any message and for any public key!**

Action:

* If you are running one of the vulnerable versions then an attacker can easily forge some types of SSL certificates and handshakes (allowing interception and modification of communications), signed JWTs, SAML assertions or OIDC id tokens, and even WebAuthn authentication messages
* If you have deployed Java 15, Java 16, Java 17, or Java 18 in production then you should stop what you are doing and immediately update to install the fixes in the April 2022 Critical Patch Update.
* The very first check in the ECDSA verification algorithm is to ensure that r and s are both >= 1.
** Guess which check Java forgot?


### Antivirus or not?

I've got an interesting question about usage of anti-virus software on cloud servers.
I asked a question on the https://devopsengineers.com/[DevOps Engineers slack^].

* The end result is that not many people use antivirus software on their server infrastructure
and some consider it to be even more risky that not running an antivirus at all (it's a complicated low-level continuously scanning all the system binaries)
* A few people mentioned solutions like https://www.clamav.net/[ClamAV^] and https://www.crowdstrike.com/falcon-platform/[Falcon platform^]


## Reading (Books)

### Perfect Software and Other Illusions about testing

A solid book by Garry Weinberg.

A lot of it is about busting various myths about software testing (such that you can find all the bugs via a perfect testing process).
They keep saying that **testing is about _providing information to managers so they can make decisions to mitigate risk_**.
It also offers an advice on how to give such information and how to receive feedback.

Recommended!


### List in Small Pieces - book club

Chris Houser is looking for people joing his book club reading the Lisp in Small Pieces book: https://chouser.us/lisp2022/

### The Art of War

I decided to order
https://www.amazon.com/gp/product/1590300548[The Art of War: Complete Texts and Commentaries^].
I've stumbled on it every now and then in the past years - for instance, I liked the selection of quotes in
https://akfpartners.com/books/the-art-of-scalability[The Art of Scalability^].

It's time to give it a shot.


## Writing (Blog, Articles)

###  https://leaddev.com/code-reviews-docs/writing-effective-technical-documentation[Writing effective technical documentation^]

This short talk offers good advice on how write good technical documentation.
My summary: 

* **Start with what the reader needs** (don't include stuff just because it's "related" or "you know about it")
* Write less
* Write the outline first - helps you to write less too and focus on what the reader needs
* "Rubber ducking" - talking helps to clarify thoughts, debug your understanding
** you can write it down to be captured in the docs later
** yields friendly conversational stuffi
** read it out loud
* write readably - not one big pile of text
** use headings, lists, short paragraphs (one idea)
** put most important bits first
* **it's not just about documentation** - think how to make the underlying thing better (fix the thing instead of "writing around the problem")

### Typing exercises

I started doing some typing exercises.
My goal is to achieve 120 wpm at 99% accuracy but so far it's been challenging :).
I think I'll need at least a few months to achieve that.

The websites I'm using:

* https://play.typeracer.com/
* 10fastfingers.com
* https://www.keybr.com

## MISC

### Searching in Chrome tabs

Are you struggling with many tabs and finding the right one quickly?
Just use **`Cmd + Shift + A`** (or Ctrl + Shift + A).
It's powerful!

### https://www.youtube.com/watch?v=1KeYzjILqDo[Leadership Without Management: Scaling Organizations by Scaling Engineers (Bryan Cantrill)^]

I watched this talk.
It was fun and re-freshing.
As always, Bryan's energy is incredible.

The key quotation for me: 

[quote, Bryan Cantrill]
____
We wanna solve hard commercially relevant problem with people that inspire us achieving a mission that we believe in.
____

The word "We" here refers to the mythical 10x/top engineers.

### https://architectelevator.com/architecture/low-code-no-code/[The Quest for Low-Code: 9 paths, some of which actually work (Gregor Hohpe)^]

A very good article on the topic of "low-code" tools and techniques.
One of the key ideas, for me, was how to measure amount of code:  _We shouldn’t count the amount of code in lines but in cognitive load_.

* Therefore, **when minimizing code we should strive to reduce the cognitive load primarily, not LOC**.
* We also need to *reduce maintenance and operations* (like most SaaS products do).


### Cool website: https://pudding.cool/

The Pudding makes data fun.
As one example, check their https://pudding.cool/2017/03/film-dialogue/[Film Dialogue^].


### Use difftastic for git diffs

https://github.com/Wilfred/difftastic[difftastic^] is a cool diffing tool and it supports Clojure!
You can use it with `git log` easily:

[source,bash]
----
GIT_EXTERNAL_DIFF=difft git log -p --ext-diff 
----

### https://en.wikipedia.org/wiki/Carrier-grade_NAT[Carrier-grade NAT^]

Until know, I somehow managed to _not_ know about this technique used by some ISPs (Internet Service Providers).
It is often used for mitigating https://en.wikipedia.org/wiki/IPv4_address_exhaustion[IPv4 address exhaustion^].
The idea is to translate end users' IP addresses to a single shared IP address.
*Hundreds users may end up with the same public IP address!*

**This can cause problems** with services blocking/whitelisting access by IP address:

- People that shouldn't be blocked are blocked because a client sharing the same public IP is misbehaving and thus gets blocked.
- People that should be blocked gain access to an internal service of a company because they share an IP address of the company's employee.


### Linux - SysRq (Magic System Request Key)

I learned about this  "magic" facility of Linux OS when reading about
https://www.suse.com/support/kb/doc/?id=000016919[Processes in an Uninterruptible Sleep (D) State^].
It can list all the processes in this 'D' state with associated kernel stack traces.
It might be very useful for debugging tricky issues.

You trigger it simply:

[source,bash]
----
echo w > /proc/sysrq-trigger
----

Then check the system's logs:

[source,bash]
----
dmesg -T
...
[Fri Apr 22 11:11:40 2022] sysrq: Show Blocked State
[Fri Apr 22 11:11:40 2022]   task                        PC stack   pid father
[Fri Apr 22 11:11:40 2022] analysis-schedu D    0  4460   2556 0x00000320
[Fri Apr 22 11:11:40 2022] Call Trace:
[Fri Apr 22 11:11:40 2022]  __schedule+0x2e3/0x740
...
----

Note: The whole https://www.kernel.org/doc/html/latest/admin-guide/index.html[The Linux kernel user’s and administrator’s guide^]
might be quite useful!

### Linux namespaces

Namespaces are a fundamental building block for Linux containers.
They give us an illusion of:

* superuser inside the container (User namespace),
* isolated file system (Mount namespace),
* process isolation (PID namespace),
* separate network (Network namespace)

I think it's worth getting familiar with them
For that,
https://www.youtube.com/watch?v=0kJPa-1FuoI[Michael Kerrisk's talk Containers unplugged: Linux namespaces^]
is an excellent starting point.


### https://www.youtube.com/watch?v=oFt6V56BOlo[System call tracing with strace (Michael Kerrisk)^]

Another great talk by Michael Kerrisk and relatively new one (2018) is about *_strace_*.
It's an impressive and very useful tool.
I used it numerous times to debug tricky issues.
It's also useful for learning about the Linux operating system.

The talk gives you a solid base to start using the tool on your own.
You can find https://man7.org/conf/ndctechtown2018/system_call_tracing_with_strace-NDC-TechTown-Kerrisk.pdf[slides here^]
and all Michael's presentations at https://man7.org/conf/index.html.

### Explore CSV files with VisiData

link:/posts/2022-02-14-weekly[I talked about VisiData before]
and I think it's a great tool.
I still struggle with it a lot, mostly because I use it only every now and then.
Accidentaly, I found how to open CSV files with non-standard delimiters like semicolons:

[source,bash]
----
vd --csv-delimiter ";" my-ebanking-export.csv
----

### https://netflixtechblog.com/netflix-flamescope-a57ca19d47bb[Flamescope^] - Flamegraph on steroids

It's like an interactive heatmap - you can select an arbitrary continuous time-slice of the captured profile, and visualize it as a flame graph.

### https://pdos.csail.mit.edu/6.828/2021/xv6.html[Xv6, a simple Unix-like teaching operating system^]

This is recommeneded for teaching/learning operating systems in the book
https://pages.cs.wisc.edu/~remzi/OSTEP/[Operating Systems: Three Easy Pieces^].

### https://unix.stackexchange.com/questions/444946/how-can-we-run-a-command-stored-in-a-variable[How can we run a command stored in a variable?^]

I needed this recently in our Dockerfile to avoid duplication when using `tini`

[source,bash]
----
mycmd=(java)
if test "$$" = "1"; then
      mycmd=(tini -- java)
fi
exec "${mycmd[@]}" -XshowSettings:vm ...
----

This is also a good reminder to not run your application as PID 1 inside the container: https://gds-way.cloudapps.digital/manuals/programming-languages/docker.html#running-programs-as-process-id-pid-1

## Links

A quick recap of some of the links mentioned in this post:

* obsolete version of HTTP spec mandated using absolute URLs for redirects: see https://en.wikipedia.org/wiki/HTTP_location
* https://github.com/jumarko/system-utilities/blob/main/monitoring/watch-java-app-on-linux.sh[My basic Java/Linux monitoring script^].
* Don't run your application as PID 1 inside the container: https://gds-way.cloudapps.digital/manuals/programming-languages/docker.html#running-programs-as-process-id-pid-1
* Amazon CloudFront now supports https://aws.amazon.com/about-aws/whats-new/2022/03/amazon-cloudfront-server-timing-headers/[Server Timing headers^]
* https://docs.oracle.com/javase/tutorial/essential/io/legacy.html[legacy Java file I/O^]
* Java Security Manager is https://openjdk.java.net/jeps/411[_deprecated for removal_^].
* https://architectelevator.com/architecture/low-code-no-code/[The Quest for Low-Code: 9 paths, some of which actually work (Gregor Hohpe)^]
* https://github.com/clojure-lsp/lsp4clj[lsp4clj^] - create any LSP for any language in Clojure
* https://github.com/cnuernber/charred[Charred^] - new JSON & CSV parsing library with zero dependencies and very fast
* https://pudding.cool/2017/03/film-dialogue/[Film Dialogue^] - one of the Pudding's pages.
* https://en.wikipedia.org/wiki/Carrier-grade_NAT[Carrier-grade NAT^]
* You could https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/security/signing.clj#L9-L23[produce a fake signature^] which Java would accept as a valid signature for any message and for any public key!**
* https://www.suse.com/support/kb/doc/?id=000016919[Processes in an Uninterruptible Sleep (D) State^] - use Linux SysRq to get details about such processes
* https://www.kernel.org/doc/html/latest/admin-guide/index.html[The Linux kernel user’s and administrator’s guide^]
* https://www.youtube.com/watch?v=0kJPa-1FuoI[Michael Kerrisk's talk Containers unplugged: Linux namespaces^]
* https://www.youtube.com/watch?v=oFt6V56BOlo[System call tracing with strace (Michael Kerrisk)^] - https://man7.org/conf/ndctechtown2018/system_call_tracing_with_strace-NDC-TechTown-Kerrisk.pdf[slides^]
* I https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/java/processes.clj#L92-L97[experimented a bit with pipe buffers^].
* https://netflixtechblog.com/netflix-flamescope-a57ca19d47bb[Flamescope^] - Flamegraph on steroids
* https://pdos.csail.mit.edu/6.828/2021/xv6.html[Xv6, a simple Unix-like teaching operating system^] - recommended in https://pages.cs.wisc.edu/~remzi/OSTEP/[Operating Systems: Three Easy Pieces^]
* https://unix.stackexchange.com/questions/444946/how-can-we-run-a-command-stored-in-a-variable[How can we run a command stored in a variable?^]
* Chris Houser started a book club reading Lisp in Small Pieces: https://chouser.us/lisp2022/
* https://cloudonaut.io/serving-content-only-to-logged-in-users-with-cloudfront-signed-cookies/[Serving content only to logged-in users with CloudFront Signed Cookies^]
* https://github.com/didibus/clj-ddd-example[clj-ddd-example^]
* https://www.youtube.com/watch?v=1KeYzjILqDo[Leadership Without Management: Scaling Organizations by Scaling Engineers (Bryan Cantrill)^]


