{
:date "2022-05-09"
:title "Weekly Bits 10/2022 - Clojure, Cider 1.4, AWS architectures, Lisp in Small Pieces, and The Fieldstone Method"
:layout :post
:tags  ["weekly-bits" "clojure" "architecture" "physics" "writing"]
}

:toc:
:toclevels: 4


_Some of the interesting things I did, learned, or found in the past week_.

## Clojure

### https://github.com/babashka/fs[babashka/fs^]

https://github.com/babashka/fs[babashka/fs^] is a file system utility library
that helps to use java.nio package from Clojure.
The standard clojure.java.io namespace and some other libraries like
https://github.com/Raynes/fs/[Raynes/fs^] use the old java.io package
and thus suffer from
https://www.baeldung.com/java-path-vs-file[several drawbacks^].
However, the nio package isn't that nice to use from Clojure and this library should help with that.

I had
link:/posts/2022-04-20-weekly#_moving_files_between_file_systems[problems with Rayne's `fs/rename`when moving files between file system].
Had I used `babashka.fs` then I could replace this code:

[source,clojure]
----
(Files/move (.toPath (io/file source))
               (.toPath (io/file target))
               (into-array (if replace-existing?
                             [StandardCopyOption/REPLACE_EXISTING]
                             [])))
----

with this call (and perhaps eliminate my custom function entirely)

[source,clojure]
----
(babashka.fs/move source target {:replace-existing replace-existing?})
----

### https://learnpedestal.com/[Learn Pedestal^] - new course by Jack Schae

Jacek published a new course reviewed by experts such as Paul de Grandis.
I wanted to have a look at pedestal for a long time and I hope this will be the right motivation to give it a try.


### https://github.com/clojure-emacs/cider/releases/tag/v1.4.0[Cider 1.4 release ("Kyiv")] - undef-all and friends

I was excited to see a few improvements in the latest Cider release, notably the support to undefine all the previous definitions
inside a namespace before loading it - simply by prefixing the usual `cider-load-file` command with `C-u` (or `SPC-u` in spacemacs).
Unfortunately, there are some problems with respect to Java imports so it's not fully functional yet.
Watch https://github.com/clojure-emacs/cider/issues/3194[Unexpected cider-undef-all outcome wrt. java.lang classes #3194^].

### https://theclouncil.com/[The Clouncil^]

The Clouncil is a fun and friendly live call-in show for Clojure beginners to ask experienced Clojurians questions and work out problems together.

I think it's a great iniative and it's run by Clojure (and teaching) experts like Arne Brasseur and Daniel Higginbotham.

### https://gist.github.com/didibus/6e5ff960b25fdc1a5f8f97acede614b0[When is Clojure "the right tool for the job"?^]

I re-discovered this essay by didibus via Clojurians slack.

[quote, didibus]
____
My take is that in general, the right tool for the job actually doesn't matter that much when it comes to programming language.
...
That's why they are called: General-purpose programming languages, because they can be used generally for most use cases without issues.
____

### https://github.com/jpmonettas/flow-storm-debugger/[Flow-storm debugger^]

A new clojure trace "debugger" has been published.
It reminds me the tracing functionality available in Cider, but maybe it can offer something valuable to specific audience.

If interested, watch the video here: https://www.youtube.com/watch?v=YnpQMrkj4v8

### https://clojureverse.org/t/how-to-structure-the-codebase-for-data-shape-discoverability/8919[How to structure the codebase for data shape discoverability^]

Sean Corfield offered good advice:

[quote, optional attribution]
____
In general, good function and argument names, and good docstrings, should tell the reader all they need to know
– see Zach Tellman’s excellent book “Elements of Clojure”.
But using Spec as an additional form of documentation for data structure can also help.
Destructuring can also be a helpful tool.
There’s no One True Way(™) here.
____



## Architecture

### https://cloudonaut.io/unusual-aws-architectures/[Cloudonaut - Unusual AWS Architectures^]

An older article from Cloudonaut discusses a few different architectures and their tradeoffs.
They talk about:

- Active-Standby (only one instance is actively serving the traffic but the other one can be used in case of failure)
- **multi-AZ RDS deployments with AZ preference** to avoid costly cross-zone traffic
- **EBS replication between two AZs** (via DRBD, Distributed Replicated Block Device),
- and a very specific one: Oracle APEX on Fargate and RDS


## Security

### https://dzone.com/articles/handling-sensitive-data-a-primer[Handling Sensitive Data: A Primer^]

This is a good introduction to the topics of **data privacy and GDPR / regulations.
Their "framework" contains three pillars:

1. Learn - identify categories of information such as _Personal Information_
2. Assess - compile a list of customer data that is already being handled and stored by your company and do technical and policy assessment
3. Govern - determine regulations and policies that apply to your situation and design or find a technical solution to implement and reinforce those policies. 



## AWS & Cloud

### RDS backups & restores - https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html[point-in-time recovery^]

With AWS RDS, it's easy to setup a backup schedule and perform regular _snapshots_ of the database, let's say on a daily basis.
But you have another option and that's called *point-in-time recovery*.
You can simply restore your DB instance to a specific point in time (with 5-minute granularity) within your *backup retention period*.
To see the latest restorable time for each DB instance go to the Amazon RDS console and choose the _Automated backups_ menu.


## Reading (Books)

### https://chouser.us/lisp2022/[Lisp in Small pieces - the book club^]

Chris Houser have been looking for people joing his book club reading
https://www.cambridge.org/core/books/lisp-in-small-pieces/66FD2BE3EDDDC68CA87D652C82CF849E[Lisp in Small Pieces^]
I hesitated at first, but decided to give it a shot and started reading the book last week.

It's quite dense right from the beginning but even if I don't finish it I think I'll get a lot of value from the process.
And it will be fun doing it with other people.

### https://www.amazon.com/Six-Easy-Pieces-Essentials-Explained/dp/0465025277[Six Easy Pieces: Essentials of Physics Explained by Its Most Brilliant Teacher^]

I've just got this wonderful little book.
It's a distillation of
https://www.feynmanlectures.caltech.edu/[The Feynman Lectures on Physics^].

So far, I've read only the introduction by Paul Davies - and that was already great!



## Writing (Blog, Articles)

I published link:/posts/https://curiousprogrammer.net/posts/2022-04-20-weekly[a long summary for the whole April].

### https://www.amazon.com/Weinberg-Writing-Fieldstone-Gerald-M/dp/093263365X[Weinberg on Writing: The fieldstone method^]

This book contains a lot of good advice and, even more importantly, **writing exercises**.
I'll be trying some of them - one that can be quite helpful is a *re-writing/eliminating* exercise (on p.92):

1. Select a couple of paragraphs
2. Eliminate 1/Nth of words in every sentence of those paragraphs
3. Eliminate 1/Nth of sentences in every paragraph
4. Add max 3 words for a paragraph if it lacks something.

Tip: For most writers, N=3 is a good value to start with.

## Links

A quick recap of some of the links mentioned in this post:

* https://github.com/babashka/fs[babashka/fs^]
** link:/posts/2022-04-20-weekly#_moving_files_between_file_systems[problems with Rayne's `fs/rename`when moving files between file system].
* https://learnpedestal.com/[Learn Pedestal^]
* https://theclouncil.com/[The Clouncil^]
* https://gist.github.com/didibus/6e5ff960b25fdc1a5f8f97acede614b0[When is Clojure "the right tool for the job"?^]
* https://clojureverse.org/t/how-to-structure-the-codebase-for-data-shape-discoverability/8919[How to structure the codebase for data shape discoverability^]
* https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html[AWS RDS - point-in-time recovery^]
* https://www.amazon.com/Six-Easy-Pieces-Essentials-Explained/dp/0465025277[Six Easy Pieces: Essentials of Physics Explained by Its Most Brilliant Teacher^]
** https://www.feynmanlectures.caltech.edu/[The Feynman Lectures on Physics^]
* https://github.com/clojure-emacs/cider/releases/tag/v1.4.0[Cider 1.4 release ("Kyiv")] - undef-all and friends
** https://github.com/clojure-emacs/cider/issues/3194[Unexpected cider-undef-all outcome wrt. java.lang classes #3194^]
* https://chouser.us/lisp2022/[Lisp in Small pieces - the book club^]
* https://github.com/jpmonettas/flow-storm-debugger/[Flow-storm debugger^]
* https://www.amazon.com/Weinberg-Writing-Fieldstone-Gerald-M/dp/093263365X[Weinberg on Writing: The fieldstone method^]

