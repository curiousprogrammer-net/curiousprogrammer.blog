{
:date "2022-06-09"
:title "Weekly Bits 12/2022 - Abstractions, Lisp in Small Pieces, lein repl vs JIT, "
:layout :post
:tags  ["weekly-bits" "clojure" "leiningen" "performance" "abstraction" "lisp-in-small-pieces"]
}

:toc:
:toclevels: 4

_Some of the interesting things I did, learned, or found in the past week (16.5 - 22.5.2022)_.

## Clojure

### Feature flags

I found https://github.com/lambdaisland/pennon[lambdaisland/pennon^] - a very simple Clojure library for feature flags.

### Eric Normand on Abstraction

In https://ericnormand.me/issues/467[Koppel's abstractions^],
Eric refers to an https://www.pathsensitive.com/2022/03/abstraction-not-what-you-think-it-is.html[article by James Koppel on abstraction^].
It's very much worth reading but the core idea is that _abstractions are **mappings between a complex concrete world**_ (like voltages),
_**and a simple idealized one**_(like binary numbers).


https://ericnormand.me/issues/468[468: Choice of abstraction matters^],

* a https://www.youtube.com/watch?v=0kXjl2e6qD0[lecture by Dijkstra^] (Edsger W. Dijkstra - The Power of Counting Arguments)
where he presents some river-crossing puzzles. One of the puzzles is the https://en.wikipedia.org/wiki/Wolf,_goat_and_cabbage_problem[Wolf-Goat-Cabbage problem^].
* there can be a downside of choosing an abstraction: e.g. using :alpha :goat where :alpha can represent both wolf and cabbage - now you can't have two alphas in the set and you need to decode that; you can also introduce errros
* if you instead choose :wolf :goat :cabbage it's  straghtforward and you can keep them in the set (although you might need to examine more choices to find the right answer)



### Clojure (de-)serialization - java.sql.Timestamp

From https://ask.clojure.org/index.php/11898/printing-and-reading-date-types[printing and reading date types^].
Here's a demonstration how `java.sql.Timestamp` is special - it is deserialized as an instance of `java.util.Date`!.

https://github.com/jumarko/clojure-experiments/blob/master/src/clojure_experiments/compiler/reader-and-printer.clj#L15-L19

[source,clojure]
----
;; notice that java.sql.Timestamp is special in this regard
;; and serializaing and deserializing it again will return java.util.Date
;; see https://ask.clojure.org/index.php/11898/printing-and-reading-date-types
(type (deserialize (serialize (java.sql.Timestamp. 1))))
;; => java.util.Date
----

### Clojure performance - `lein repl` vs `clj`

https://clojurians.slack.com/archives/C03S1KBA2/p1652857914524299?thread_ts=1652533347.157599&cid=C03S1KBA2[Ben Sless on Slack^]
mentioned that `lein repl` turns off some JIT optimizations which in some cases yields significantly slower code execution.

https://clojurians.slack.com/archives/C03S1KBA2/p1653299277273069?thread_ts=1652533347.157599&cid=C03S1KBA2[I experimented with it^]
a bit and found that leiningen adds the following JVM flags:

[source,bash]
----
-XX:+TieredCompilation
-XX:TieredStopAtLevel=1
----

This means that the Tiered compilation stops at the first level - only the most basic optimizations performed by _client_ compiler are applied.

In practice, this might lead to a big performance impact:

* plain clojure
+
[source,clojure]
----
clj

user=> (System/getProperty "java.version")
"17.0.2"

user=> (time (reduce + (range 100000000)))
"Elapsed time: 609.163893 msecs"
4999999950000000
----
* lein repl
+
[source,clojure]
----
lein repl

user=> (System/getProperty "java.version")
"17.0.2"

user=>  (time (reduce + (range 100000000)))
"Elapsed time: 2808.390173 msecs"
----


## AWS & Cloud


### Glob expressions in Cloudwatch Insights

`parse` in Cloudwatch Insights supports glob expressions: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html

[source]
----
parse @message "[*] * The error was: *" as level, config, exception
----

This is easier to use than `parse` with regular expressions.



## Reading (Books)

### Lisp in Small Pieces

I almost finished the first chapter, did some exercises, had another fun pairing session,
and worked hard to get ready for the second chapter.

I'd say the most important section is 1.6 about **function execution environment**.

The difference between _lexical_ and _dynamic_ binding demonstrated in 1.6.1
is also important although the _dynamic_ binding felt like a tangent - worth exploration
but not something we are going to focus on going forward.

I only skimmed section 1.6.2 _Deep or Shallow Implementation_
because I don't think _shallow_ implementation is very useful
(the cost of lookup is already minimal when using a hashmap to represent an environment).

In 1.7 _Global Environment_ we have defined a handful of standard useful functions (aka "stdlib")
such as `list`, `cons`, `car`, `+`, etc.
We have defined them through a couple of macros `definitial` and `defprimitive`.
I didn't expect it but I got stuck on these macros for a few hours, mostly due
to problems with symbol (auto-)resolution.
With a lot of trial and error and using `macroexpand` I finally managed to make them work.


In 1.8 _Starting the Interpreter_, we implemented dead-simple interpreter/REPL,
later extended in one of the exercises to support clean exit:

[source,clojure]
----
(defn repl1
  "Reads a single line from stdin, `evaluate`s it and prints the result to stdout.
  Returns the evaluated expression."
  []
  (-> (read) (evaluate env-global) (doto (prn))))

;; this is called `toplevel` in the book
(defn repl
  "`repl1` in a loop with support for a clean exit via `(end)`.
  To exit enter "
  ([]
   (println "Welcome to the REPL!")
   (println "You can evaluate forms one by one - they are read from stdin.")
   (println "When you are done, type (end)")
   (repl nil))
  ([last-ret]
   (if (= last-ret 'repl.exit)
     (println "Bye!")
     (recur (repl1)))))
----



You can find all my code here: https://github.com/jumarko/lisp-in-small-pieces/tree/main/clojure/src


## MISC


### 1Password CLI - sign in only if you are not already

For things like using AWS MFA for AWS CLI I leverage 1password CLI.
But it takes a while to sign in and I do not want to do it if I'm already logged in.
Here's a way to do it:

[source,bash]
----
op account get > /dev/null || eval $(op signin) && echo "signed in"
----



## Links

A quick recap of some of the links mentioned in this post:

* https://github.com/jumarko/lisp-in-small-pieces/tree/main/clojure/src[My code for Lisp in Small Pieces^]
* Eric Normand on Abstraction
** https://ericnormand.me/issues/467[467: Koppel's abstractions^]
** https://ericnormand.me/issues/468[468: Choice of abstraction matters^]
*** https://www.youtube.com/watch?v=0kXjl2e6qD0[Edsger W. Dijkstra - The Power of Counting Arguments^]
* `parse` in Cloudwatch Insights supports glob expressions: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html
* (Clojure) printing and reading date types: https://ask.clojure.org/index.php/11898/printing-and-reading-date-types
* https://clojurians.slack.com/archives/C03S1KBA2/p1652857914524299?thread_ts=1652533347.157599&cid=C03S1KBA2[Ben Sless on Slack^] mentioned that `lein repl` turns off some JIT optimizations

