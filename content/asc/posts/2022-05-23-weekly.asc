{
:date "2022-05-23"
:title "Weekly Bits 11/2022 - TODO"
:layout :post
:tags  ["weekly-bits" "clojure" "aws" "architecture"]
}

:toc:
:toclevels: 4

TODO: continue with 12.5.2022

_Some of the interesting things I did, learned, or found in the week 9.5.2022 - 15.5.2022_.

## Clojure

### Fixing `:absolute-redirects`'s default in ring-defaults

I made a PR for ring-defaults to
https://github.com/ring-clojure/ring-defaults/pull/40[change :absolute-redirects default to false^].
This is to fix the value based on an outdated HTTP spec - I wrote about this problem in more detail before
in link:/posts/2022-04-20-weekly#_broken_https_redirects_friend_and_ring[Broken HTTP/S redirects, friend, and ring^].

### Eric Normand on Abstraction.

I read a few of the Eric's recent newsletters focused on how to make good _abstractions_.

The first one was
https://ericnormand.me/issues/purelyfunctional-tv-newsletter-463-what-is-beautiful-code[463: What is beautiful code?^],
in which he quotes Fran Allen from Peter Seibel's interview in Coders At Work: Seibel asks "What makes a program beautiful?"
Her answer surprised me with its insight:

[quote, Fran Allen]
____
That it is a simple straightforward solution to a problem; that has some intrinsic structure and obviousness about it that isn't obvious from the problem itself.
____

Eric then ellaborates on it:

* To paraphrase: "The solution is obvious, but it isn't obvious from the problem itself."
* It reminds me a lot of Aristotle's advice for a good ending to a story: both surprising and inevitable


Another newsletter was https://ericnormand.me/issues/465[465: Abstraction is the essence of programming^]
where Eric says that we focus too much on the style of programming and not enough on the content.

[quote, optional attribution]
____
I still contend that the most maintainable code is code that models essential concepts in the domain.
____

And he's confident that the proper answer is abstraction:

* Abstraction is a mapping from a concrete domain to an abstract domain. 
* We map the days of the week (concrete domain) to the integers 1-7 (abstract domain)
** Then we can write useful operations on them because computers handle integers easily.
** But Are integers the best way to represent the days? What other choices do we have? How do we choose between them?
* The act of abstraction is the essence of programming.


## Java / JVM



## AWS & Cloud



## Architecture



## Security



## Reading (Books)

### LiSP (Lisp in Small Pieces)

I said before, that Chris Houser started a book club reading Lisp in Small Pieces: https://chouser.us/lisp2022/
I started doing some real work and notably did a pairing session with another member of the book club.
It was fun and useful to go through the code with somebody else.
It was so good that we actually did two pairing sessions a couple of days later.

I spent a lot of extra time on this book - I'm a slow reader and to digest the material,
I need to go through it several times and try to implement as much as possible myself.
This week I got to the end of the section 1.5 and also read intro to 1.6 (function execution environment)
where the things start getting really interesting.



## Writing (Blog, Articles)

I wroted down several sketches for future blog posts.
These are only very early drafts so I'll see if I can complete any of them soon.



## Ergonomics

Such as searching in Chrome tabs, Vimium shortcuts, Terminal tips, etc.



## MISC

### https://www.youtube.com/watch?v=73nB9-HYbAI[Containers unplugged: Understanding user namespaces^]

A great talk by Michael Kerrisk (the author of _The Linux Programming Interface_).
If you want to understand a foundational building block for Docker and other container technologies,
watch this talk!




## Links

A quick recap of some of the links mentioned in this post:

* https://github.com/ring-clojure/ring-defaults/pull/40[change :absolute-redirects default to false^].
* https://www.youtube.com/watch?v=73nB9-HYbAI[Containers unplugged: Understanding user namespaces^]



