{
:date "2099-01-01"
:title "Git Authentication in Docker"
:layout :post
:tags  ["git" "docker" "security"]
}

:toc:

_How to access private Git repositories from within a process running in a Docker container_.

If you are running a code analysis tool,
you will probably need to solve the problem of giving the tool access to remote Git repositories.
If those repositories are public, you can simply give it an HTTPS URL like
https://github.com/facebook/react.git and call it the day.

But if your repository is private, you need to figure out authentication. 

In the text below, I'll assume that you are using
https://codescene.com[CodeScene]'s on-premise solution as your code analysis tool.
However, the discussion should be applicable to any other tool or platform that needs to access private git repositories.


## SSH

A common authentication method used for accessing remote git repositories
is https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh[SSH^].

You can generate a new keypair, store it in the `~/.ssh/` folder,
and let the tool use it.
If you are running the tool inside a container, then it's a bit trickier.
That is, how do you share the SSH key with the container?

### Mounting SSH volume

To let the container use your host's ssh keys,
you can simply mount the whole `~/.ssh/` folder inside the container.
With CodeScene, it could look like this (using a https://docs.docker.com/storage/volumes/#choose-the--v-or---mount-flag[mount bind^]):

```
docker --mount type=bind,src="${HOME}/.ssh",dst="/codescene/.ssh" ...
```

(Make sure that `known_hosts` contains a reference to the servers you will be cloning from.)

This solves the basic need but you need to mount the `.ssh` folder from the host
(which you may not want to do)
and it doesn't work well with keys with passphrases.

### Generating a unique SSH key inside/for the container

Instead of generating and storing the SSH key on the host,
you can generate a dedicated key in the image/container and store it on a persistent volume.

CodeScene has a good documentation about that: https://docs.enterprise.codescene.io/latest/getting-started/installation.html?highlight=docker#git-repository-access

It works like this:

1. Create an SSH key inside the container (here as the `codescene` user):
+
[source,bash]
----
docker exec -it  -u codescene [CONTAINER]  ssh-keygen
----
2. Add the corresponding public key to your git provider - the public part of the SSH key can be displayed using this command:
+
[source,bash]
----
docker exec -it  -u codescene [CONTAINER]  ssh-keygen -y
----
3. Test the ssh access to your repository provider after adding the ssh key:
+
[source,bash]
----
docker exec -it  -u codescene [CONTAINER]  ssh -T git@github.com
----

This solution has the benefit of using a dedicated SSH key for the tool and you don't need to share your hosts' keys.
However, it **still doesn't support keys with passphrases**
and you need a persistent volume to store that key (in our case, CodeScene uses a persistent volume anyway)
otherwise you would need to generate a new key everytime the container is started.


### Keys with https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases[passphrases^]

It's a good practice to protect your SSH keys with a passphrase.
It adds additional layer of security if unauthorized person or program gets access to the key - without the passphrase, the key is useless.
https://tmp.bearblog.dev/encrypt-your-ssh-keys/[_Encrypt your SSH keys_ blog post^] mentions this motivation:
[quote]
____
a popular https://www.bleepingcomputer.com/news/security/pytorch-discloses-malicious-dependency-chain-compromise-over-holidays/[Python package was compromised and malicious code was injected^].
One of the things it did was upload $HOME/.ssh/* to a remote server.
This isn't great, but if your keys are encrypted the situation is much better.
____

Assuming you want to use a key with a passphrase, you now have a problem.
Whenever you try `git clone` or similar operation, it will ask prompt you to enter the password.
This may work (although it's annoying) if you are running git commands manually in the terminal.
However, the tool is most likely running an analysis in the background
and either there's no interactive console at all (in which case the process fails)
or there's no user waiting for the prompt and entering the password(s).


Here's a summary of some possible approaches:

* The common approach is using an SSH agen, which we'll discuss next.
* Another possible approach could be to use something like https://linux.die.net/man/1/sshpass[`sshpass`^]
but then you need to store the password in the tool and invoke all the git commands that require password
via `sshpass`.
* Finally, don't use SSH keys at all :) (use access tokens instead)


### SSH agent

TODO: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding



### GitHub deploy keys

If your remote code is on GitHub,
instead of standard SSH keys granting access to all your repositories,
you could use [Deploy keys](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys)
to give the tool access


## HTTPS

### HTTPS with username/password embedded in the URL

### HTTPS with authentication token

Instead of using your real username & password, it's  better
to use a dedicated authentication token (commonly called Personal Access Token or PAT).

The exact usage depends on your provider, e.g.

* GitHub
* Bitbucket
* GitLab


### HTTPS with credentials not exposed in the URL

Rather than hardcoding and exposing credentials in the URL,
it would be more secure to use 



## Resources

* About SSH https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh
* https://docs.enterprise.codescene.io/latest/getting-started/installation.html#git-repository-access[CodeScene On-Prem docs - Git repository access^]
* https://linux.die.net/man/1/sshpass[`sshpass`^]
