{
:date "2099-01-01"
:title "DNS: on (not so obvious) recursive name resolution"
:layout :post
:tags  ["dns" "networking" "tcpdump"]
}

:toc:

TODO:

* try flushing DNS cache and ask again, without +trace flag for dig



https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/reviewing-dns-concepts[Recursive name resolution^] in DNS
is often trivially described as a process of repeatedly querying a hierarchy of name servers
in order to get an IP address for a specific domain.

However, it may not be clear how exactly the process looks like
and there are some nuances that can cause confusion,
in particular, how does the client figure out the IP addresses of name servers themselves.

In this post, we'll look at the whole process in details
using tcpdump to peek at DNS traffic.

## DNS resolver configuration

To get an ip address for a domain name, for instance codescene.io,
the client (your app, the browser, `dig`, etc.)
asks the DNS resolver configured in the system.

A typical place for this configuration on UNIX-based systems is `/etc/resolv.conf`;

### macOS DNS configuration

Here's the `resolve.conf` file on my macOS system - I'm using
https://docs.quad9.net/[9.9.9.9^] (privacy and security focused DNS service)
as my primary recursive DNS resolver:

[source,bash]
----
cat /etc/resolv.conf
#
# macOS Notice
#
# This file is not consulted for DNS hostname resolution, address
# resolution, or the DNS query routing mechanism used by most
# processes on this system.
#
# To view the DNS configuration used by this system, use:
#   scutil --dns
#
# SEE ALSO
#   dns-sd(1), scutil(8)
#
# This file is automatically generated.
#
nameserver 9.9.9.9
nameserver 149.112.112.112
nameserver 149.112.112.9
nameserver 2620:fe::fe
nameserver 2620:fe::9
----

As you can see, this file is _automatically generated_ and thus not the ultimate source of truth.
You would find the same configuration in the System Settings app -> "DNS servers":

image::/img/2023-11-02-dns/macos-dns-config.png[macOS DNS servers settings]


### Linux DNS configuration

On a Linux box managed by _systemd_, you could see something like this:

[source,bash]
----
cat /etc/resolv.conf
# This is /run/systemd/resolve/stub-resolv.conf managed by man:systemd-resolved(8).
# Do not edit.
#
# This file might be symlinked as /etc/resolv.conf. If you're looking at
# /etc/resolv.conf and seeing this text, you have followed the symlink.
#
# This is a dynamic resolv.conf file for connecting local clients to the
# internal DNS stub resolver of systemd-resolved. This file lists all
# configured search domains.
#
# Run "resolvectl status" to see details about the uplink DNS servers
# currently in use.
#
# Third party programs should typically not access this file directly, but only
# through the symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a
# different way, replace this symlink by a static file or a different symlink.
#
# See man:systemd-resolved.service(8) for details about the supported modes of
# operation for /etc/resolv.conf.

nameserver 127.0.0.53
options edns0 trust-ad
search .
----

Again, this isn't the ultimate source of true but rather a config generated by `systemd-resolved` footnote:[
we can look at /etc/systemd/resolved.conf to find more about the systemd-resolved configuration].
It instructs us to _run "resolvectl status" to see details about the uplink DNS servers_.

Let's try that:

[source,bash]
----
resolvectl status
Global
       Protocols: -LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported
resolv.conf mode: stub

Link 2 (eth0)
    Current Scopes: DNS
         Protocols: +DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported
Current DNS Server: 2a01:4ff:ff00::add:1
       DNS Servers: 2a01:4ff:ff00::add:1 2a01:4ff:ff00::add:2 185.12.64.2 185.12.64.1

Link 3 (docker0)
Current Scopes: none
     Protocols: -DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported
...
----

Let's focus on the `eth0` interface which serves the traffic to/from the Internet:
[source,bash]
----
Current DNS Server: 2a01:4ff:ff00::add:1
       DNS Servers: 2a01:4ff:ff00::add:1 2a01:4ff:ff00::add:2 185.12.64.2 185.12.64.1
----

We can see it uses a couple of DNS servers (redundancy!).
Further down, **you'll see them (their IPv6 addresses) in the tcpdump packet captures**.

Let's peek at one of them with `host -v` to see what it is :

[source,bash]
----
host -v 185.12.64.1
Trying "1.64.12.185.in-addr.arpa"
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 61140
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 3, ADDITIONAL: 0

;; QUESTION SECTION:
;1.64.12.185.in-addr.arpa.      IN      PTR

;; ANSWER SECTION:
1.64.12.185.in-addr.arpa. 7182  IN      PTR     ns1.recursivedns.hetzner.com.

;; AUTHORITY SECTION:
64.12.185.in-addr.arpa. 7182    IN      NS      ns3.second-ns.de.
64.12.185.in-addr.arpa. 7182    IN      NS      ns1.your-server.de.
64.12.185.in-addr.arpa. 7182    IN      NS      ns.second-ns.com.
----

It is simply a dns service hosted by the cloud provider (Hetzner) I'm using for this virtual machine.

## DNS name resolution

Now we'll look at the process of resolving a domain name not already stored in the local system's dns cache.

### tcpdump, yey!

Loosly following a fantastic article **https://www.netmeister.org/blog/dns-tcpdump.html[DNS tcpdump by example^]**,
we try this:

[source,bash]
----
sudo tcpdump -w dns.pcap -nni any port 53
tcpdump: data link type LINUX_SLL2
tcpdump: listening on any, link-type LINUX_SLL2 (Linux cooked v2), snapshot length 262144 bytes
----

Then this in another terminal window:

[source,bash]
----
root@ubuntu-4gb-fsn1-1:~# dig codescene.io

...

;; ANSWER SECTION:
codescene.io.           60      IN      A       18.245.60.119
codescene.io.           60      IN      A       18.245.60.4
codescene.io.           60      IN      A       18.245.60.88
codescene.io.           60      IN      A       18.245.60.64

;; AUTHORITY SECTION:
codescene.io.           11839   IN      NS      ns-1795.awsdns-32.co.uk.
codescene.io.           11839   IN      NS      ns-509.awsdns-63.com.
codescene.io.           11839   IN      NS      ns-613.awsdns-12.net.
codescene.io.           11839   IN      NS      ns-1258.awsdns-29.org.

;; Query time: 20 msec
;; SERVER: 127.0.0.53#53(127.0.0.53) (UDP)
;; WHEN: Fri Nov 03 04:31:07 UTC 2023
;; MSG SIZE  rcvd: 245
----

Once that's completed we interrupt tcpdump running in the first window
and look at the captured packets:

[source,bash]
----
tcpdump -n -r dns.pcap
reading from file dns.pcap, link-type LINUX_SLL2 (Linux cooked v2), snapshot length 262144
Warning: interface names might be incorrect
04:31:07.397542 lo    In  IP 127.0.0.1.49185 > 127.0.0.53.53: 4474+ [1au] A? codescene.io. (53)
04:31:07.397772 eth0  Out IP6 2a01:4f8:c17:c124::1.39964 > 2a01:4ff:ff00::add:1.53: 28926+ [1au] A? codescene.io. (41)
04:31:07.417808 eth0  In  IP6 2a01:4ff:ff00::add:1.53 > 2a01:4f8:c17:c124::1.39964: 28926 4/4/1 A 18.245.60.119, A 18.245.60.4, A 18.245.60.88, A 18.245.60.64 (245)
04:31:07.418283 lo    In  IP 127.0.0.53.53 > 127.0.0.1.49185: 4474 4/4/1 A 18.245.60.119, A 18.245.60.4, A 18.245.60.88, A 18.245.60.64 (245)
----

From the dig output above, we can see that the local dns server (127.0.0.53) has been used to answer the query:

[source,bash]
----
;; SERVER: 127.0.0.53#53(127.0.0.53) (UDP)
----

From the tcpdump packet capture, we can follow what exactly happened:

1. **The client** (dig - using ephemeral port 49185) **asked the local dns server** (127.0.0.53.53) for the A record of the codescene.io domain
+
[source,bash]
----
04:31:07.397542 lo    In  IP 127.0.0.1.49185 > 127.0.0.53.53: 4474+ [1au] A? codescene.io. (53)
----
2. **The local dns server asked the "Current DNS server"** 2a01:4ff:ff00::add:1 (see `resolvectl status` above):
+
[source,bash]
----
04:31:07.397772 eth0  Out IP6 2a01:4f8:c17:c124::1.39964 > 2a01:4ff:ff00::add:1.53: 28926+ [1au] A? codescene.io. (41)
----
NOTE: 2a01:4f8:c17:c124 is my system's global IPv6 address as can be seen via `ifconfig`:
+
[source,bash]
----
ifconfig
...
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 188.34.187.204  netmask 255.255.255.255  broadcast 0.0.0.0
        inet6 2a01:4f8:c17:c124::1  prefixlen 64  scopeid 0x0<global>
        inet6 fe80::9400:2ff:fe36:132e  prefixlen 64  scopeid 0x20<link>
...
----
3. **The remote DNS server (2a01:4ff:ff00::add:1) responds** to our local DNS server (systemd-resolved), returning 4 IP addresses:
+
[source,bash]
----
04:31:07.417808 eth0  In  IP6 2a01:4ff:ff00::add:1.53 > 2a01:4f8:c17:c124::1.39964: 28926 4/4/1 A 18.245.60.119, A 18.245.60.4, A 18.245.60.88, A 18.245.60.64 (245)
----
4. **The local dns server relays the response** to the client (dig):
+
[source,bash]
----
04:31:07.418283 lo    In  IP 127.0.0.53.53 > 127.0.0.1.49185: 4474 4/4/1 A 18.245.60.119, A 18.245.60.4, A 18.245.60.88, A 18.245.60.64 (245)

----



### _Recursive_ DNS name resolution

So far, it's been pretty straightforward - we asked the local DNS server to resolve a domain.
It didn't have the answer in it's cache so it asked the remote DNS server to resolve it.
It then returned the answer.

However, we couldn't see how the _remote_ DNS server figured out the answer.
Did it have it already in its cache?
Maybe yes, but what happens if not? 

Let's use `dig +trace` to simulate it.
We'll try another domain, www.tul.cz (see also **https://www.root.cz/clanky/principy-fungovani-dns-zivot-jednoho-dotazu/[Principy fungování DNS: život jednoho dotazu^]**:):

Let's fire up tcpdump again and run `dig +trace wwww.tul.cz`:

[source,bash]
----
tcpdump -w dns-tul.pcap -nni any port 53
...

# in another terminal
dig +trace www.tul.cz 

# read the tcpdump
tcpdump -n -r dns-tul.pcap
...
04:20:28.499492 lo    In  IP 127.0.0.1.59523 > 127.0.0.53.53: 55584+ [1au] NS? . (40)
04:20:28.499870 lo    In  IP 127.0.0.53.53 > 127.0.0.1.59523: 55584 13/0/1 NS b.root-servers.net., NS c.root-servers.net., NS d.root-servers.net., NS m.root-servers.net., NS k.root-servers.net., NS a.root-servers.net., NS h.root-servers.net
., NS l.root-servers.net., NS g.root-servers.net., NS i.root-servers.net., NS f.root-servers.net., NS j.root-servers.net., NS e.root-servers.net. (239)
04:20:28.502775 lo    In  IP 127.0.0.1.54745 > 127.0.0.53.53: 2401+ [1au] A? b.root-servers.net. (47)
04:20:28.502794 lo    In  IP 127.0.0.1.54745 > 127.0.0.53.53: 19813+ [1au] AAAA? b.root-servers.net. (47)
04:20:28.503499 lo    In  IP 127.0.0.53.53 > 127.0.0.1.54745: 2401 1/13/26 A 199.9.14.201 (825)
04:20:28.504279 lo    In  IP 127.0.0.53.53 > 127.0.0.1.54745: 19813 1/13/26 AAAA 2001:500:200::b (825)
04:20:28.504563 lo    In  IP 127.0.0.1.47256 > 127.0.0.53.53: 54802+ [1au] A? c.root-servers.net. (47)
04:20:28.504609 lo    In  IP 127.0.0.1.47256 > 127.0.0.53.53: 34065+ [1au] AAAA? c.root-servers.net. (47)
04:20:28.505327 lo    In  IP 127.0.0.53.53 > 127.0.0.1.47256: 54802 1/13/26 A 192.33.4.12 (825)
04:20:28.505954 lo    In  IP 127.0.0.53.53 > 127.0.0.1.47256: 34065 1/13/26 AAAA 2001:500:2::c (825)
04:20:28.506241 lo    In  IP 127.0.0.1.32881 > 127.0.0.53.53: 18382+ [1au] A? d.root-servers.net. (47)
04:20:28.506260 lo    In  IP 127.0.0.1.32881 > 127.0.0.53.53: 57808+ [1au] AAAA? d.root-servers.net. (47)
04:20:28.506868 lo    In  IP 127.0.0.53.53 > 127.0.0.1.32881: 18382 1/13/26 A 199.7.91.13 (825)
04:20:28.507476 lo    In  IP 127.0.0.53.53 > 127.0.0.1.32881: 57808 1/13/26 AAAA 2001:500:2d::d (825)
04:20:28.507666 lo    In  IP 127.0.0.1.40052 > 127.0.0.53.53: 23296+ [1au] A? m.root-servers.net. (47)
04:20:28.507684 lo    In  IP 127.0.0.1.40052 > 127.0.0.53.53: 33807+ [1au] AAAA? m.root-servers.net. (47)
04:20:28.507728 lo    In  IP 127.0.0.53.53 > 127.0.0.1.40052: 23296 1/0/1 A 202.12.27.33 (63)
04:20:28.508348 lo    In  IP 127.0.0.53.53 > 127.0.0.1.40052: 33807 1/13/26 AAAA 2001:dc3::35 (825)
04:20:28.508631 lo    In  IP 127.0.0.1.56581 > 127.0.0.53.53: 48704+ [1au] A? k.root-servers.net. (47)
04:20:28.508650 lo    In  IP 127.0.0.1.56581 > 127.0.0.53.53: 24646+ [1au] AAAA? k.root-servers.net. (47)
04:20:28.508742 lo    In  IP 127.0.0.53.53 > 127.0.0.1.56581: 48704 1/0/1 A 193.0.14.129 (63)
04:20:28.509348 lo    In  IP 127.0.0.53.53 > 127.0.0.1.56581: 24646 1/13/26 AAAA 2001:7fd::1 (825)
04:20:28.509525 lo    In  IP 127.0.0.1.33501 > 127.0.0.53.53: 37708+ [1au] A? a.root-servers.net. (47)
04:20:28.509542 lo    In  IP 127.0.0.1.33501 > 127.0.0.53.53: 38323+ [1au] AAAA? a.root-servers.net. (47)
04:20:28.510204 lo    In  IP 127.0.0.53.53 > 127.0.0.1.33501: 37708 1/13/26 A 198.41.0.4 (825)
04:20:28.510815 lo    In  IP 127.0.0.53.53 > 127.0.0.1.33501: 38323 1/13/26 AAAA 2001:503:ba3e::2:30 (825)
04:20:28.510975 lo    In  IP 127.0.0.1.57832 > 127.0.0.53.53: 25926+ [1au] A? h.root-servers.net. (47)
04:20:28.510991 lo    In  IP 127.0.0.1.57832 > 127.0.0.53.53: 56184+ [1au] AAAA? h.root-servers.net. (47)
04:20:28.511036 lo    In  IP 127.0.0.53.53 > 127.0.0.1.57832: 25926 1/0/1 A 198.97.190.53 (63)
04:20:28.511088 lo    In  IP 127.0.0.53.53 > 127.0.0.1.57832: 56184 1/0/1 AAAA 2001:500:1::53 (75)
04:20:28.511241 lo    In  IP 127.0.0.1.47207 > 127.0.0.53.53: 51819+ [1au] A? l.root-servers.net. (47)
04:20:28.511256 lo    In  IP 127.0.0.1.47207 > 127.0.0.53.53: 28004+ [1au] AAAA? l.root-servers.net. (47)
04:20:28.511842 lo    In  IP 127.0.0.53.53 > 127.0.0.1.47207: 51819 1/13/26 A 199.7.83.42 (825)
04:20:28.512553 lo    In  IP 127.0.0.53.53 > 127.0.0.1.47207: 28004 1/13/26 AAAA 2001:500:9f::42 (825)
04:20:28.512880 lo    In  IP 127.0.0.1.55425 > 127.0.0.53.53: 53662+ [1au] A? g.root-servers.net. (47)
04:20:28.512900 lo    In  IP 127.0.0.1.55425 > 127.0.0.53.53: 32664+ [1au] AAAA? g.root-servers.net. (47)
04:20:28.513486 lo    In  IP 127.0.0.53.53 > 127.0.0.1.55425: 53662 1/13/26 A 192.112.36.4 (825)
04:20:28.514130 lo    In  IP 127.0.0.53.53 > 127.0.0.1.55425: 32664 1/13/26 AAAA 2001:500:12::d0d (825)
04:20:28.514428 lo    In  IP 127.0.0.1.45885 > 127.0.0.53.53: 15542+ [1au] A? i.root-servers.net. (47)
04:20:28.514447 lo    In  IP 127.0.0.1.45885 > 127.0.0.53.53: 2736+ [1au] AAAA? i.root-servers.net. (47)
04:20:28.515229 lo    In  IP 127.0.0.53.53 > 127.0.0.1.45885: 15542 1/13/26 A 192.36.148.17 (825)
04:20:28.515810 lo    In  IP 127.0.0.53.53 > 127.0.0.1.45885: 2736 1/13/26 AAAA 2001:7fe::53 (825)
04:20:28.515987 lo    In  IP 127.0.0.1.57382 > 127.0.0.53.53: 40333+ [1au] A? f.root-servers.net. (47)
04:20:28.516004 lo    In  IP 127.0.0.1.57382 > 127.0.0.53.53: 3212+ [1au] AAAA? f.root-servers.net. (47)
04:20:28.516599 lo    In  IP 127.0.0.53.53 > 127.0.0.1.57382: 40333 1/13/26 A 192.5.5.241 (825)
04:20:28.517237 lo    In  IP 127.0.0.53.53 > 127.0.0.1.57382: 3212 1/13/26 AAAA 2001:500:2f::f (825)
04:20:28.517430 lo    In  IP 127.0.0.1.52118 > 127.0.0.53.53: 45483+ [1au] A? j.root-servers.net. (47)
04:20:28.517447 lo    In  IP 127.0.0.1.52118 > 127.0.0.53.53: 17321+ [1au] AAAA? j.root-servers.net. (47)
04:20:28.518019 lo    In  IP 127.0.0.53.53 > 127.0.0.1.52118: 45483 1/13/26 A 192.58.128.30 (825)
04:20:28.518616 lo    In  IP 127.0.0.53.53 > 127.0.0.1.52118: 17321 1/13/26 AAAA 2001:503:c27::2:30 (825)
04:20:28.518806 lo    In  IP 127.0.0.1.40439 > 127.0.0.53.53: 52289+ [1au] A? e.root-servers.net. (47)
04:20:28.518824 lo    In  IP 127.0.0.1.40439 > 127.0.0.53.53: 54851+ [1au] AAAA? e.root-servers.net. (47)
04:20:28.519451 lo    In  IP 127.0.0.53.53 > 127.0.0.1.40439: 52289 1/13/26 A 192.203.230.10 (825)
04:20:28.520123 lo    In  IP 127.0.0.53.53 > 127.0.0.1.40439: 54851 1/13/26 AAAA 2001:500:a8::e (825)
04:20:28.520567 eth0  Out IP 188.34.187.204.41387 > 202.12.27.33.53: 6315 [1au] A? www.tul.cz. (51)
04:20:28.534579 eth0  In  IP 202.12.27.33.53 > 188.34.187.204.41387: 6315- 0/6/9 (625)
04:20:28.535223 lo    In  IP 127.0.0.1.55165 > 127.0.0.53.53: 28760+ [1au] A? d.ns.nic.cz. (40)
04:20:28.535250 lo    In  IP 127.0.0.1.55165 > 127.0.0.53.53: 30045+ [1au] AAAA? d.ns.nic.cz. (40)
04:20:28.535442 lo    In  IP 127.0.0.53.53 > 127.0.0.1.55165: 28760 1/0/1 A 193.29.206.1 (56)
04:20:28.535601 lo    In  IP 127.0.0.53.53 > 127.0.0.1.55165: 30045 1/0/1 AAAA 2001:678:1::1 (68)
04:20:28.536144 lo    In  IP 127.0.0.1.36184 > 127.0.0.53.53: 28557+ [1au] A? b.ns.nic.cz. (40)
04:20:28.536168 lo    In  IP 127.0.0.1.36184 > 127.0.0.53.53: 55936+ [1au] AAAA? b.ns.nic.cz. (40)
04:20:28.536328 lo    In  IP 127.0.0.53.53 > 127.0.0.1.36184: 28557 1/0/1 A 194.0.13.1 (56)
04:20:28.536460 lo    In  IP 127.0.0.53.53 > 127.0.0.1.36184: 55936 1/0/1 AAAA 2001:678:10::1 (68)
04:20:28.536781 lo    In  IP 127.0.0.1.58337 > 127.0.0.53.53: 5875+ [1au] A? a.ns.nic.cz. (40)
04:20:28.536813 lo    In  IP 127.0.0.1.58337 > 127.0.0.53.53: 62454+ [1au] AAAA? a.ns.nic.cz. (40)
04:20:28.536931 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58337: 5875 1/0/1 A 194.0.12.1 (56)
04:20:28.537045 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58337: 62454 1/0/1 AAAA 2001:678:f::1 (68)
04:20:28.537267 lo    In  IP 127.0.0.1.56504 > 127.0.0.53.53: 8153+ [1au] A? c.ns.nic.cz. (40)
04:20:28.537291 lo    In  IP 127.0.0.1.56504 > 127.0.0.53.53: 4828+ [1au] AAAA? c.ns.nic.cz. (40)
04:20:28.537407 lo    In  IP 127.0.0.53.53 > 127.0.0.1.56504: 8153 1/0/1 A 194.0.14.1 (56)
04:20:28.537518 lo    In  IP 127.0.0.53.53 > 127.0.0.1.56504: 4828 1/0/1 AAAA 2001:678:11::1 (68)
04:20:28.537847 eth0  Out IP 188.34.187.204.43018 > 194.0.14.1.53: 30080 [1au] A? www.tul.cz. (51)
04:20:28.549243 eth0  In  IP 194.0.14.1.53 > 188.34.187.204.43018: 30080- 0/4/3 (277)
04:20:28.549643 lo    In  IP 127.0.0.1.58319 > 127.0.0.53.53: 45296+ [1au] A? tul.cesnet.cz. (42)
04:20:28.549666 lo    In  IP 127.0.0.1.58319 > 127.0.0.53.53: 56572+ [1au] AAAA? tul.cesnet.cz. (42)
04:20:28.549893 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58319: 45296 1/4/3 A 78.128.211.250 (192)
04:20:28.550036 eth0  Out IP6 2a01:4f8:c17:c124::1.37051 > 2a01:4ff:ff00::add:2.53: 41390+ [1au] AAAA? tul.cesnet.cz. (42)
04:20:28.567757 eth0  In  IP6 2a01:4ff:ff00::add:2.53 > 2a01:4f8:c17:c124::1.37051: 41390 1/0/1 AAAA 2001:718:1:1f:50:56ff:feee:250 (70)
04:20:28.567976 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58319: 56572 1/0/1 AAAA 2001:718:1:1f:50:56ff:feee:250 (70)
04:20:28.568341 lo    In  IP 127.0.0.1.60796 > 127.0.0.53.53: 11805+ [1au] A? bubo.tul.cz. (40)
04:20:28.568370 lo    In  IP 127.0.0.1.60796 > 127.0.0.53.53: 27161+ [1au] AAAA? bubo.tul.cz. (40)
04:20:28.568534 lo    In  IP 127.0.0.53.53 > 127.0.0.1.60796: 11805 1/0/1 A 147.230.16.1 (56)
04:20:28.568670 lo    In  IP 127.0.0.53.53 > 127.0.0.1.60796: 27161 1/0/1 AAAA 2001:718:1c01:16::aa (68)
04:20:28.569073 eth0  Out IP 188.34.187.204.42350 > 147.230.16.1.53: 27159 [1au] A? www.tul.cz. (51)
04:20:28.593526 eth0  In  IP 147.230.16.1.53 > 188.34.187.204.42350: 27159*- 4/0/1 CNAME novy.tul.cz., A 147.230.18.195, RRSIG, RRSIG (278)
----

Wow, that's a lot of traffic!
What happened?

You can see that the client is now asking a lot of questions.
Here's the whole process in outline:

* It starts by refreshing information about root name servers
* It then picks one of the root servers, namely m.root-servers.net, ...:
* It asks the root name server for the A record of www.tul.cz.
* The root server delegates the client to TLD namesevers responsible for the .cz TLD domain
* The client picks one of the TLD nameservers, c.ns.nic.cz, and repeats the question
* The TLD name server doesn't have an authoritative answer but it returns a list
  of authoritative name servers, namely tul.cesnet.cz bubo.tul.cz.
* Finally, the client will ask one of the authoritative name servers, bubo.tul.cz,
and gets answer it was looking for+




### Starting at the root

* It starts by refreshing information about root name servers
* It then picks one of the root servers, namely m.root-servers.net, ...:
+
[source,bash]
----
04:20:28.507684 lo    In  IP 127.0.0.1.40052 > 127.0.0.53.53: 33807+ [1au] AAAA? m.root-servers.net. (47)
04:20:28.507728 lo    In  IP 127.0.0.53.53 > 127.0.0.1.40052: 23296 1/0/1 A 202.12.27.33 (63)
----
* ... and asks it for the A record of www.tul.cz.
The root server for sure doesn't have the authoritative answer but it tells the client where to ask next:
+
[source,bash]
----
04:20:28.520567 eth0  Out IP 188.34.187.204.41387 > 202.12.27.33.53: 6315 [1au] A? www.tul.cz. (51)
04:20:28.534579 eth0  In  IP 202.12.27.33.53 > 188.34.187.204.41387: 6315- 0/6/9 (625)

04:20:28.535223 lo    In  IP 127.0.0.1.55165 > 127.0.0.53.53: 28760+ [1au] A? d.ns.nic.cz. (40)
04:20:28.535250 lo    In  IP 127.0.0.1.55165 > 127.0.0.53.53: 30045+ [1au] AAAA? d.ns.nic.cz. (40)
04:20:28.535442 lo    In  IP 127.0.0.53.53 > 127.0.0.1.55165: 28760 1/0/1 A 193.29.206.1 (56)
04:20:28.535601 lo    In  IP 127.0.0.53.53 > 127.0.0.1.55165: 30045 1/0/1 AAAA 2001:678:1::1 (68)
04:20:28.536144 lo    In  IP 127.0.0.1.36184 > 127.0.0.53.53: 28557+ [1au] A? b.ns.nic.cz. (40)
04:20:28.536168 lo    In  IP 127.0.0.1.36184 > 127.0.0.53.53: 55936+ [1au] AAAA? b.ns.nic.cz. (40)
04:20:28.536328 lo    In  IP 127.0.0.53.53 > 127.0.0.1.36184: 28557 1/0/1 A 194.0.13.1 (56)
04:20:28.536460 lo    In  IP 127.0.0.53.53 > 127.0.0.1.36184: 55936 1/0/1 AAAA 2001:678:10::1 (68)
04:20:28.536781 lo    In  IP 127.0.0.1.58337 > 127.0.0.53.53: 5875+ [1au] A? a.ns.nic.cz. (40)
04:20:28.536813 lo    In  IP 127.0.0.1.58337 > 127.0.0.53.53: 62454+ [1au] AAAA? a.ns.nic.cz. (40)
04:20:28.536931 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58337: 5875 1/0/1 A 194.0.12.1 (56)
04:20:28.537045 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58337: 62454 1/0/1 AAAA 2001:678:f::1 (68)
04:20:28.537267 lo    In  IP 127.0.0.1.56504 > 127.0.0.53.53: 8153+ [1au] A? c.ns.nic.cz. (40)
04:20:28.537291 lo    In  IP 127.0.0.1.56504 > 127.0.0.53.53: 4828+ [1au] AAAA? c.ns.nic.cz. (40)
04:20:28.537407 lo    In  IP 127.0.0.53.53 > 127.0.0.1.56504: 8153 1/0/1 A 194.0.14.1 (56)
04:20:28.537518 lo    In  IP 127.0.0.53.53 > 127.0.0.1.56504: 4828 1/0/1 AAAA 2001:678:11::1 (68)
----
** NOTE: 188.34.187.204 is the public IP of the host where the queries are executed.

* The client got a list of the TLD (.cz domain) nameservers
and it asks for their IPs footnote:[Glue records are normally used to store IP addresses of name servers in the parent zone
and the IP addresses of the name servers are returned immediately in the ADDITIONAL SECTION
of the original answer - TODO clarify].
It picks one of TLD servers, c.ns.nic.cz (IP 194.0.14.1), and asks again:
+
[source,bash]
----
04:20:28.537847 eth0  Out IP 188.34.187.204.43018 > 194.0.14.1.53: 30080 [1au] A? www.tul.cz. (51)
04:20:28.549243 eth0  In  IP 194.0.14.1.53 > 188.34.187.204.43018: 30080- 0/4/3 (277)
----
* But the c.ns.nic.cz server doesn't have the authoritative answer either, but it tells the client
where to search for it - this time either tul.cesnet.cz or bubo.tul.cz.
The local resolver is fetching the IP addresses of those:
+
[source,bash]
----
04:20:28.549643 lo    In  IP 127.0.0.1.58319 > 127.0.0.53.53: 45296+ [1au] A? tul.cesnet.cz. (42)
04:20:28.549666 lo    In  IP 127.0.0.1.58319 > 127.0.0.53.53: 56572+ [1au] AAAA? tul.cesnet.cz. (42)
04:20:28.549893 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58319: 45296 1/4/3 A 78.128.211.250 (192)
04:20:28.550036 eth0  Out IP6 2a01:4f8:c17:c124::1.37051 > 2a01:4ff:ff00::add:2.53: 41390+ [1au] AAAA? tul.cesnet.cz. (42)
04:20:28.567757 eth0  In  IP6 2a01:4ff:ff00::add:2.53 > 2a01:4f8:c17:c124::1.37051: 41390 1/0/1 AAAA 2001:718:1:1f:50:56ff:feee:250 (70)
04:20:28.567976 lo    In  IP 127.0.0.53.53 > 127.0.0.1.58319: 56572 1/0/1 AAAA 2001:718:1:1f:50:56ff:feee:250 (70)
04:20:28.568341 lo    In  IP 127.0.0.1.60796 > 127.0.0.53.53: 11805+ [1au] A? bubo.tul.cz. (40)
04:20:28.568370 lo    In  IP 127.0.0.1.60796 > 127.0.0.53.53: 27161+ [1au] AAAA? bubo.tul.cz. (40)
04:20:28.568534 lo    In  IP 127.0.0.53.53 > 127.0.0.1.60796: 11805 1/0/1 A 147.230.16.1 (56)
04:20:28.568670 lo    In  IP 127.0.0.53.53 > 127.0.0.1.60796: 27161 1/0/1 AAAA 2001:718:1c01:16::aa (68)
----
* Finally, the client will ask one of the authoritative name servers, bubo.tul.cz,
and gets answer it was looking for+
[source,bash]
----
04:20:28.569073 eth0  Out IP 188.34.187.204.42350 > 147.230.16.1.53: 27159 [1au] A? www.tul.cz. (51)
04:20:28.593526 eth0  In  IP 147.230.16.1.53 > 188.34.187.204.42350: 27159*- 4/0/1 CNAME novy.tul.cz., A 147.230.18.195, RRSIG, RRSIG (278)
----
** www.tul.cz is a CNAME for novy.tul.cz which has IP address (A record) 147.230.18.195:



## Chicken-egg ("Glue records")

https://serverfault.com/questions/309622/what-is-a-glue-record[What is a **glue record**?^]

* very useful and clarifies the "chicken egg" problem with DNS - finding an IP address for ns1.example.com which is within example.com 
* [glue records] allow the TLD's servers to send extra information in their response to the query for the example.com zone - to send the IP address that's configured for the name servers, too. It's not authoritative, but it's a pointer to the authoritative servers, allowing for the loop to be resolved.

In the process described above you might be wondering:

1. How does the resolver know where to start from
2. When the resolver receives a non-authoritative answer (such as the .io nameserver
saying "Hey, I don't know the IP address of codescene.io but please ask this nameserver instead")

(1) can be answered by two things:
* DNS configuration with IP addresses, not names
* The concept of _Root hints_.

(2) 

### Explanation on Wikipedia

Here's a nice explanation from Wikipedia: 
https://en.wikipedia.org/wiki/Domain_Name_System#Circular_dependencies_and_glue_records[Circular dependencies and glue records^]
(it's linked in the ServerFault question above (https://serverfault.com/a/309625/402267)):


[quote, optional attribution]
____
Name servers in delegations are identified by name, rather than by IP address.
This means that a resolving name server must issue another DNS request
to find out the IP address of the server to which it has been referred.
If the name given in the delegation is a subdomain of the domain
for which the delegation is being provided, there is a **circular dependency**.
In this case the nameserver providing the delegation
**must also provide one or more IP addresses for the authoritative nameserver** mentioned in the delegation.
This information is called **glue**.
...

For example, if the authoritative name server for example.org is ns1.example.org,
a computer trying to resolve www.example.org first resolves ns1.example.org.
Since ns1 is contained in example.org, this requires resolving example.org first, which presents a circular dependency.
To break the dependency, the nameserver for the org top level domain includes glue along with the delegation for example.org.
The glue records are address records that provide IP addresses for ns1.example.org.
The resolver uses one or more of these IP addresses to query one of domain's authoritative servers,
which allows it to complete the DNS query.
____

          
## Resources

* https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/reviewing-dns-concepts[Reviewing DNS Concepts - recursive name resolution^]
* TODO: Adrian's DNS mini-series
* **https://www.netmeister.org/blog/dns-tcpdump.html[DNS tcpdump by example^]**
* https://docs.quad9.net/[the 9.9.9.9 nameserver^]
* **https://www.root.cz/clanky/principy-fungovani-dns-zivot-jednoho-dotazu/[Principy fungování DNS: život jednoho dotazu^]**
* https://unix.stackexchange.com/questions/170930/how-to-capture-and-see-packet-contents-with-tcpdump[how to capture and see packet contents with tcpdump^]
* https://serverfault.com/questions/309622/what-is-a-glue-record[What is a **glue record**?^]
* https://en.wikipedia.org/wiki/Domain_Name_System#Circular_dependencies_and_glue_records[Circular dependencies and glue records - Wikipedia^]


