{
:date "2099-01-01"
:title "Capability-Based Access Control: 1password link sharing"
:layout :post
:tags  ["security" "access-control" "authorization" "usability" "api-security-in-action"]
}

:toc:

_This is a short post demonstrating Capability-based access control via the 1Password link sharing feature_.

I've been reading https://www.amazon.co.uk/dp/1617296023[Api Security in Action^] book for a long time
(it's long and demanding, but great!).
Recently, I started chapter 9 which is about "Capability-based security".

I want to share a quick real-world example of this approach implemented by 1Password.

## Capability-based security

Unlike Identity-based security, which uses your identity ("who you are") to determine your permissions ("what you can do"),
https://en.wikipedia.org/wiki/Capability-based_security[Capability-based security^]
uses _capabilities_, unforgeable references to objects or resources together with a set of permissions to access those resources.

A classic example of this is unique link used to share specific resource, such as a document stored on Google Drive.

### Benefits - TODO: maybe move to the end??

To understand why capability-based security might be useful, let's discuss its benefits:

* People who need to access a resource don't need to get a dedicated account registered at the service hosting the resource
** If you need to share a documented stored on Google Drive, you can simply send them a link - they don't need to be
   a part of your Google workspace or may not even have Google account.
* Principle of Least Privilege (also know as Princple of Least Authority - POLA)
** Whoever gets the link has only access to given resource and nothing else
** Without the link, they are not event able to make a request to the resource
* Avoids https://en.wikipedia.org/wiki/Ambient_authority[_ambient authority_] problem 
** A classic example of this problem is https://portswigger.net/web-security/csrf[CSRF^] -
where an attacker may trick the browser to send a session cookie to a website which the attacker should not have access to
** Another example is IP-based firewall/filtering where the requests coming from a whitelisted IP address
automatically get the permission to access the resource
** See also http://cap-lore.com/CapTheory/ConfusedDeputy.html[The Confused Deputy^] which discusses
the original confused deputy - a compiler running on a shared computer

TODO: discuss more benefits as on page 298:

* (Unlike with OAuth2) app author doesn't need to decide ahead of time what resources that app will need to access
* There's no extra "consent page" step
* Consistent UI that can be implemented by the resource server itself (such as Dropbox Chooser UI)
** this means the user experience is the same regardless of what application they use to integrate with the resource.

### Possible downsides

1. harder to get holistic picture of who has access to what
2. confinement - uncontrolled sharing; mandatory access control?
3. revocation - impossible to revoke? 
4. Sharing "credentials" in the URL
** especially when the token is encoded in the URL path or a query parameter - using fragment or userinfo is considered more secure
(see also Api Security in Action, p. 301)

(2) and (3) are mostly myths addressed by the real-world capability systems.
In particular, we'll see how 1Password addresses these problems.



## 1Password link sharing

A good example of capability-based approach to security is
https://support.1password.com/share-items/[1Password item sharing^]


## References

* https://www.amazon.co.uk/dp/1617296023[Api Security in Action^] book
** Ch8 (p.268) - Identity-based access control
** Ch9 (p.294) - Capability-based security

* Capability-based security: https://en.wikipedia.org/wiki/Capability-based_security
* https://srl.cs.jhu.edu/pubs/SRL2003-02.pdf[Capability Myths Demolished^] (paper)
* https://support.1password.com/share-items/[1Password item sharing^]

* https://en.wikipedia.org/wiki/Ambient_authority[_ambient authority_] problem
** https://portswigger.net/web-security/csrf[CSRF^]
** http://cap-lore.com/CapTheory/ConfusedDeputy.html[The Confused Deputy^]
** The confused deputy problem in AWS: https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html