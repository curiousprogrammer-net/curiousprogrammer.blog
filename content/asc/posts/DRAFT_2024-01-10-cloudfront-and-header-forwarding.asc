{
:date "2099-01-01"
:title "YOUR TITLE"
:layout :post
:tags  [""]
}

:toc:

_Write intro here_.

CodeScene.io  - Troubleshooting CloudFront headers (not passing If-None-Match header) 


=> CloudFront - caching, cache policies and origin request policies

Adding CloudFront request headers https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/adding-cloudfront-headers.html
- To include these headers in the cache key, use a cache policy.  For more information, see Controlling the cache key and Understanding the cache key.
- To receive these headers at your origin but NOT include them in the cache key, use an origin request policy.  For more information, see Controlling origin requests.
	- the origin always receives URL path, request body, and these headers: Host , User-Agent , X-Amz-Cf-Id 
	- Origin request policies are separate from cache policies, which control the cache key. 
		- This separation enables you to receive additional information at the origin and also maintain a good cache hit ratio
		- the two kinds of policies are separate BUT related. All URL query strings, HTTP headers, and cookies that you include in the cache key (using a cache policy) are automatically included in origin requests. Use the origin request policy to specify the information that you want to include in origin requests, but not include in the cache key.
	- YOu attach origin request policy to cache Behaviors in CloudFront distribution => see Creating origin request policies
		- NOTE: this is only possible using the new Cache policy and origin request policy setting - not using Legacy cache settings we've been using so far

Controlling the cache key https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html 
- notably Understanding cache policies section
- The time to live (TTL) settings work together with the Cache-Control and Expires HTTP headers (if they're in the origin response) to determine how long objects in the CloudFront cache remain valid.

Cache policies -> managed policies : https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html 
- CachingOptimized policy - designed to optimize cache efficiency by minimizing the values that CloudFront includes in the cache key - NO query strings, NO cookies in the cache key, and only includes the normalized Accept-Encoding header.

Understanding the cache key https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-the-cache-key.html 
- cache key = unique identifier for an object in the cache
- cache hit occurs when a viewer request generates the same cache key as a prior request, and the object for that cache key is in the edge location’s cache and valid.
- One way to improve your cache hit ratio is to include only the minimum necessary values in the cache key.
	- When a value in the viewer request determines the response that your origin returns, you should include that value in the cache key. 
		- For example, if your origin server uses the Accept-Language HTTP header in viewer requests to return different content based on the viewer’s language, you might want to include this header in the cache key.
			- BUT, this might mean caching duplicate objects  - because Accept-Language values can be something like en-US,en , en,en-US , en-US, en , en-US - in that case maybe use different URLs for different languages
		- User-Agent rarely makes sense to include in cache key - because it may have thousands of different values
			- also cookies are not good candidates (they have user-specific or session-specific values, unique across thousands or millions of requests
	- But if you include a value in the cache key that doesn’t affect the response that your origin returns, you might end up caching duplicate objects.
- Default cache key = domain name (of cloudfront distribution) + URL path
	- other values from viewer request are NOT included

Managing how long content stays in the cache (expiration) https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html 
- By default, each file automatically expires after 24 hours, but you can change the default behavior in two ways:
	- Minimum TTL, Maximum TTL, Default TTL
	- Cache-Control header and max-age (or Expires header)
- You can also control how long errors stay in a CloudFront cache before CloudFront tries again to get the requested object by forwarding another request to your origin. 
	- see How CloudFront processes and caches HTTP 4xx and 5xx status codes from your origin.
	- If the origin doesn't respond, the CloudFront request to the origin times out which is considered an HTTP 5xx error from the origin, even though the origin didn't respond with that error
		- In that scenario, CloudFront continues to serve cached content. For more information, see Origin unavailable.



## Resources

* 
